{"meta":{"version":1,"warehouse":"4.0.1"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/avater.png","path":"img/avater.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"47414946f132bde93f4ee04058c331d38e1c2ad5","modified":1628092965654},{"_id":"source/_posts/20180901ajax的相关学习.md","hash":"396105d88ecd1e0e3a0de09ec65c6fe55993ee12","modified":1535774966000},{"_id":"source/_posts/.DS_Store","hash":"8ec44510b9eda18ced0e4bc67ab9bb60cb84d869","modified":1534254187000},{"_id":"source/_drafts/每天的习惯.md","hash":"4c84e6819d6578869937466128f5649a01ef04d3","modified":1534345139000},{"_id":"source/_posts/19年书单.md","hash":"884f375a2610493d7efd0984d66f88d9e4e3ee98","modified":1556507573638},{"_id":"source/_posts/20190502工作项目之解决邮件服务方案.md","hash":"56e38eff801ec5338fac561b22180bc057b25b3e","modified":1559977903295},{"_id":"source/_posts/20190608DLAN实现简单的投屏功能.md","hash":"d42468ebc7ad26a369a31c5d2c00a436f41fe9f5","modified":1559979668140},{"_id":"source/_posts/hexo博客整理（二）.md","hash":"6a31ffc67a6e1590fb77bdb79698926542d77854","modified":1533050668000},{"_id":"source/_posts/hexo博客整理（一）.md","hash":"cf109f0e72438ad1d487584951ba7f56664123a0","modified":1533050661000},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1532366168000},{"_id":"source/_posts/learning.md","hash":"6f7a728d378e694b23e517f2d450d3161205a148","modified":1532531617000},{"_id":"source/_posts/又想起来了.md","hash":"c7abf2ccb25d356a7437e6b304aacffdcfab74c1","modified":1656828152846},{"_id":"source/_posts/勉励自己.md","hash":"3e7bbcd34f6176dda180a1d18f0eee1fb9cb54b1","modified":1552492137584},{"_id":"source/_posts/准备学习的东西.md","hash":"4a49483c1c07578dd3df8f18b168c5687bce4fd8","modified":1533052212000},{"_id":"source/_posts/随想.md","hash":"9945ee1a17ae482cb4409ff6b8d51b978fc39ebd","modified":1553015204914},{"_id":"source/_posts/准备学习的东西（二）.md","hash":"eb151ed6ad25910083d095af3bb96703d9c17adf","modified":1533052161000},{"_id":"source/_posts/面试问到的问题.md","hash":"4fab91df698867ad8fe91b2d64f695344fbc64b8","modified":1552491785570},{"_id":"source/categories/index.md","hash":"4113db9c721c83f8fd427b375906c8c8e65c0221","modified":1532434652000},{"_id":"source/tags/index.md","hash":"44125e315536456e49717c38f13b8c61f8c3ca05","modified":1532432519000},{"_id":"source/contactme/index.md","hash":"26ad57dd19b3bd8264f6987d77ce0275f89d1793","modified":1532532459000},{"_id":"source/_posts/hexo博客整理（三）.md","hash":"7e89e44b511139979ce740e80919626b4ba2f01b","modified":1534254391000},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532362793000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1532362793000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1532362793000},{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1532362793000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1532362793000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1532362793000},{"_id":"themes/yilia/_config.yml","hash":"08d23176ee82b2f847760be1976abcad7dcc2351","modified":1535211690000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1532362793000},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1532362793000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1532362793000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1532362793000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1532362793000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1532362793000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1532362793000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1532362793000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1532362793000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1532362793000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1532362793000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1532362793000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1532362793000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1532362793000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1532362793000},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"589ce26c2e2222cc86ab6b5e97d006aa68378a78","modified":1532522961000},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1532362793000},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1532362793000},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"446078f017e21ba3e673549e55da9f5bbc5f581c","modified":1533051185000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"762053573d1c608db71758094295a4545663650c","modified":1532608537000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1532362793000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1532362793000},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1532362793000},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1532362793000},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1532362793000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1532362793000},{"_id":"themes/yilia/source/img/avater.png","hash":"409e7187477d52eee1ec3294f27163320badc77e","modified":1532520563000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1532362793000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1532362793000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1532362793000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1532362793000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1532362793000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1532362793000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1532362793000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1532362793000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1532362793000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1532362793000},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1532362793000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1532362793000},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1532362793000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1532362793000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1532362793000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1532362793000},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1532362793000},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1532362793000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1532362793000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1532362793000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1532362793000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1532362793000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1532362793000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1532362793000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1532362793000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1532362793000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1532362793000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1532362793000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1532362793000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1532362793000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1532362793000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1532362793000},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1532362793000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1532362793000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1532362793000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1532362793000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1532362793000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1532362793000},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1532362793000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1532362793000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1532362793000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1532362793000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"7cf6a6756c640c47d47197f961650d3649004aad","modified":1532526063000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1532362793000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"8124d920d97b6edf98b78643783199bcb576fc26","modified":1532527589000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1532362793000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1532362793000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1532362793000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1532362793000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1532362793000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1532362793000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1532362793000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1532362793000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1532362793000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1532362793000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1532362793000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1532362793000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1532362793000},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1532362793000},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1532362793000},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1532362793000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1532362793000},{"_id":"public/content.json","hash":"c3aa64bf917d26c998e2e9471fecc3220b6959f9","modified":1656828174362},{"_id":"public/categories/index.html","hash":"00accbee189f6b69d3aa5fab820be77377df5860","modified":1656828174362},{"_id":"public/tags/index.html","hash":"e9ca3a8b15a8920607d973b5bb846236eb989722","modified":1656828174362},{"_id":"public/contactme/index.html","hash":"1d1d4cc09d98967e999048db8042e2e496bf2281","modified":1656828174362},{"_id":"public/2022/07/03/又想起来了/index.html","hash":"b930a660b25ccc60db2a0dc26ee0348f6869f6ff","modified":1656828174362},{"_id":"public/2019/06/08/20190608DLAN实现简单的投屏功能/index.html","hash":"c730c9278c476472a65ee9b80d6e4c1a64b968b3","modified":1656828174362},{"_id":"public/2019/05/02/20190502工作项目之解决邮件服务方案/index.html","hash":"20ef6e172df4b5f8c42b1d795a59847c8f8352e4","modified":1656828174362},{"_id":"public/2019/03/18/随想/index.html","hash":"5cf801624addbc1664ddbf7561516a169c9df1d9","modified":1656828174362},{"_id":"public/2019/03/14/19年书单/index.html","hash":"0e176c2c3e0b86624e51ad58a779019032076416","modified":1656828174362},{"_id":"public/2019/03/13/勉励自己/index.html","hash":"a5cc062fe54907464fe303f79a6baff3b49ef911","modified":1656828174362},{"_id":"public/2019/01/05/面试问到的问题/index.html","hash":"6c25eeba1e6fb715900ee2028b251f400e1754c4","modified":1656828174362},{"_id":"public/2018/07/31/准备学习的东西（二）/index.html","hash":"5525b9ad44b3c32d6f0643dfc0858399ff02c52a","modified":1656828174362},{"_id":"public/2018/09/01/20180901ajax的相关学习/index.html","hash":"fe328feb2f05ad171730b2ed0e0bcf2488d7c5d0","modified":1656828174362},{"_id":"public/2018/07/31/hexo博客整理（三）/index.html","hash":"f57755d2eee5acf6b5a3af7f18d06f1abcfed35f","modified":1656828174362},{"_id":"public/2018/07/30/准备学习的东西/index.html","hash":"fbfcc3b3016dd81e326628f571883ad9f5c9d452","modified":1656828174362},{"_id":"public/2018/07/26/hexo博客整理（二）/index.html","hash":"91d15c31ec5e86957fd2b4e7973b1f39e9dc532a","modified":1656828174362},{"_id":"public/2018/07/25/hexo博客整理（一）/index.html","hash":"bac8958cfcc66346cafe8e77d5628e3f42295eb7","modified":1656828174362},{"_id":"public/2018/07/24/learning/index.html","hash":"feb06985db191f08d8b86f6d5695ff8ba906fe08","modified":1656828174362},{"_id":"public/2018/07/24/hello-world/index.html","hash":"d53f60bbdb3556c02ccbb79d339a980cfa47ba8f","modified":1656828174362},{"_id":"public/index.html","hash":"9261a94c7f8b68fee48d6b829ea25f2a18b61c74","modified":1656828174362},{"_id":"public/page/2/index.html","hash":"fe036421f5b931346837b7b87b5cfad38bcb3066","modified":1656828174362},{"_id":"public/archives/index.html","hash":"a34566c6d6983c5f503910ad53d4fad0f438815f","modified":1656828174362},{"_id":"public/archives/2018/index.html","hash":"613246a96f0205f3a6dfd33111aebfe80025ef09","modified":1656828174362},{"_id":"public/archives/page/2/index.html","hash":"6d9dd579ee7bd35da4b876f2a35e7d8f9d471a0c","modified":1656828174362},{"_id":"public/archives/2018/07/index.html","hash":"70658bb5b878c3a0507fef47e727abd785e4e0cc","modified":1656828174362},{"_id":"public/archives/2018/09/index.html","hash":"ed608e9b79a841bd1b6ab0b01ef9c705baf84d8a","modified":1656828174362},{"_id":"public/archives/2019/index.html","hash":"66de4391b9349de872e7f92a10fb102d37f8f649","modified":1656828174362},{"_id":"public/archives/2019/03/index.html","hash":"0890be148b18e4735df458b0ae65766f370f8fa0","modified":1656828174362},{"_id":"public/archives/2019/01/index.html","hash":"caf5f064364388ed6079b1154689c069719eedb3","modified":1656828174362},{"_id":"public/archives/2019/05/index.html","hash":"5bf9d42941ee3dc0010d3990aa1f5be6e6ec1a63","modified":1656828174362},{"_id":"public/archives/2019/06/index.html","hash":"9d12b910425fd36e8bc3d4fed7f1668fac590994","modified":1656828174362},{"_id":"public/archives/2022/index.html","hash":"dd707ffa0f607fc2a3d99087b61188bcbb8ff441","modified":1656828174362},{"_id":"public/archives/2022/07/index.html","hash":"33e93d751d6deb32439afd6c6d539c83d730fc55","modified":1656828174362},{"_id":"public/categories/学习/index.html","hash":"f876aa880e9532c60b38c0a477472698da834e12","modified":1656828174362},{"_id":"public/categories/笔记/index.html","hash":"57e96588d815167eb796f939988c5bc3f35796ad","modified":1656828174362},{"_id":"public/tags/随笔/index.html","hash":"b7478f3a6385d7a99950c6aba5ef5992090e7db3","modified":1656828174362},{"_id":"public/tags/学习/index.html","hash":"bb5c4fc4dd17a1fa8e5df772b989bb61e7376f82","modified":1656828174362},{"_id":"public/tags/ajax/index.html","hash":"864589debd9038d267d78e6f242d845661aab4c3","modified":1656828174362},{"_id":"public/tags/博客优化/index.html","hash":"351ccb951b4155aa72b51941f704cd66cb14dce2","modified":1656828174362},{"_id":"public/tags/java/index.html","hash":"9dfed95a1a7dc0c92cddf1f30a42ed64696a1335","modified":1656828174362},{"_id":"public/tags/感想/index.html","hash":"56ca4e2c5fd100ead57850b31c0b3deffd250249","modified":1656828174362},{"_id":"public/tags/面试/index.html","hash":"0d268c92185e0b501ead75a3a15a84cd7c653c1d","modified":1656828174362},{"_id":"public/tags/随想/index.html","hash":"84abfaed42f9e3e09c1d0287212c93752d84d3df","modified":1656828174362},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1656828174362},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1656828174362},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1656828174362},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1656828174362},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1656828174362},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1656828174362},{"_id":"public/img/avater.png","hash":"409e7187477d52eee1ec3294f27163320badc77e","modified":1656828174362},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1656828174362},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1656828174362},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1656828174362},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1656828174362},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1656828174362},{"_id":"public/main.0cf68a.css","hash":"589ce26c2e2222cc86ab6b5e97d006aa68378a78","modified":1656828174362},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1656828174362}],"Category":[{"name":"学习","_id":"cl54wpti10004y42jh7txejwg"},{"name":"笔记","_id":"cl54wptj00014y42j4ya0hn4v"}],"Data":[],"Page":[{"title":"categories","date":"2018-07-24T12:17:32.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-24 20:17:32\n---\n","updated":"2018-07-24T12:17:32.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cl54wpthr0000y42jab4p3sll","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-24T11:41:59.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-24 19:41:59\n---\n","updated":"2018-07-24T11:41:59.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cl54wpthy0002y42j7au97jzf","content":"","site":{"data":{}},"excerpt":"","more":""},{"closeComments":true,"_content":"\n---\n## 欢迎志同道合的朋友和我一起交流\n\n* QQ:574710183\n* 微信:wx_chaseton\n","source":"contactme/index.md","raw":"---\ncloseComments: true\n\n---\n\n---\n## 欢迎志同道合的朋友和我一起交流\n\n* QQ:574710183\n* 微信:wx_chaseton\n","date":"2018-07-27T12:51:34.000Z","updated":"2018-07-25T15:27:39.000Z","path":"contactme/index.html","title":"","comments":1,"layout":"page","_id":"cl54wpti30006y42jehif0zzo","content":"<hr>\n<h2 id=\"欢迎志同道合的朋友和我一起交流\"><a href=\"#欢迎志同道合的朋友和我一起交流\" class=\"headerlink\" title=\"欢迎志同道合的朋友和我一起交流\"></a>欢迎志同道合的朋友和我一起交流</h2><ul>\n<li>QQ:574710183</li>\n<li>微信:wx_chaseton</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<hr>\n<h2 id=\"欢迎志同道合的朋友和我一起交流\"><a href=\"#欢迎志同道合的朋友和我一起交流\" class=\"headerlink\" title=\"欢迎志同道合的朋友和我一起交流\"></a>欢迎志同道合的朋友和我一起交流</h2><ul>\n<li>QQ:574710183</li>\n<li>微信:wx_chaseton</li>\n</ul>\n"}],"Post":[{"title":"19年书单","date":"2019-03-13T16:04:16.000Z","_content":"\n2019年，更新自己的知识，争取更大的突破，多看书\n\n|书名|进度|\n|:---:|:---:|\n|《小岛经济学》|已完成|\n|《六祖讲金刚经》|已完成|\n|《富爸爸穷爸爸》|20190327完成|\n|《java并发编程的艺术》|进行中|\n|《java并发编程实践》|已完成|\n|《深入理解java虚拟机-jvm高级特性与最佳实践》|已完成|\n|《高性能Mysql》|未开始|\n|《netty实战》|20190427完成|\n|《日本蜡烛图技术》|20190425开始，进行中|\n","source":"_posts/19年书单.md","raw":"---\ntitle: 19年书单\ndate: 2019-03-14 00:04:16\ncategories: \n- 学习\ntags: 随笔\n---\n\n2019年，更新自己的知识，争取更大的突破，多看书\n\n|书名|进度|\n|:---:|:---:|\n|《小岛经济学》|已完成|\n|《六祖讲金刚经》|已完成|\n|《富爸爸穷爸爸》|20190327完成|\n|《java并发编程的艺术》|进行中|\n|《java并发编程实践》|已完成|\n|《深入理解java虚拟机-jvm高级特性与最佳实践》|已完成|\n|《高性能Mysql》|未开始|\n|《netty实战》|20190427完成|\n|《日本蜡烛图技术》|20190425开始，进行中|\n","slug":"19年书单","published":1,"updated":"2019-04-29T03:12:53.638Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wpthu0001y42j8k5chlm4","content":"<p>2019年，更新自己的知识，争取更大的突破，多看书</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">书名</th>\n<th align=\"center\">进度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">《小岛经济学》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《六祖讲金刚经》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《富爸爸穷爸爸》</td>\n<td align=\"center\">20190327完成</td>\n</tr>\n<tr>\n<td align=\"center\">《java并发编程的艺术》</td>\n<td align=\"center\">进行中</td>\n</tr>\n<tr>\n<td align=\"center\">《java并发编程实践》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《深入理解java虚拟机-jvm高级特性与最佳实践》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《高性能Mysql》</td>\n<td align=\"center\">未开始</td>\n</tr>\n<tr>\n<td align=\"center\">《netty实战》</td>\n<td align=\"center\">20190427完成</td>\n</tr>\n<tr>\n<td align=\"center\">《日本蜡烛图技术》</td>\n<td align=\"center\">20190425开始，进行中</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<p>2019年，更新自己的知识，争取更大的突破，多看书</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">书名</th>\n<th align=\"center\">进度</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">《小岛经济学》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《六祖讲金刚经》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《富爸爸穷爸爸》</td>\n<td align=\"center\">20190327完成</td>\n</tr>\n<tr>\n<td align=\"center\">《java并发编程的艺术》</td>\n<td align=\"center\">进行中</td>\n</tr>\n<tr>\n<td align=\"center\">《java并发编程实践》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《深入理解java虚拟机-jvm高级特性与最佳实践》</td>\n<td align=\"center\">已完成</td>\n</tr>\n<tr>\n<td align=\"center\">《高性能Mysql》</td>\n<td align=\"center\">未开始</td>\n</tr>\n<tr>\n<td align=\"center\">《netty实战》</td>\n<td align=\"center\">20190427完成</td>\n</tr>\n<tr>\n<td align=\"center\">《日本蜡烛图技术》</td>\n<td align=\"center\">20190425开始，进行中</td>\n</tr>\n</tbody></table>\n"},{"title":"每天的习惯","reward":true,"toc":true,"_content":"\n## 每天的习惯\n\n\n### 一、梳理原则\n\n1. 要有效的使用时间，比如坐地铁的时候肯定是看不了电脑的，只能看书或者冥想\n2. 要利用所有的时间，早上＋工作日琐碎时间＋地铁＋晚上\n3. 合理安排任务时间，如果对自己的任务很清楚，能完全清楚能多久完成，可以订好时间，如果不清楚自己的任务有哪几部分，那可以先把理清任务，弄清任务的每部分大概花多少时间作为首要任务，比如，今天要写一个部署定时任务道puphago上，我不清楚怎么部署，不知道有哪些步骤，哪些事要做，那今天不会安排这个整个大的项目，需要安排一项任务，”在多少时间内弄清楚这个任务有哪些逻辑，需要耗时多少“。\n4. 每天要做的东西很多，要思考的东西很多，层次也不一，千万不要为了一个太执着，导致时间都浪费在一个上\n以上是对自己目前出现的问题的一个梳理和思路\n\n<!--more-->\n### 二、每天的时间点\n\n1. 每天早上6点起床\n2. 7点40开始上班\n3. 8点40到公司\n4. 梳理当天工作时间内的工作计划和学习计划\n5. 11点半吃饭\n6. 12点吃完\n7. 1点15上班\n8. 6点15下班\n9. 7点20到家\n10. 7点半做饭\n11. 8点做好\n12. 10点写日记和土豪分享\n13. 11点睡觉\n\n### 三、每天要做的事\n\n1. 冥想\n2. 看书\n    1. 中级经济师、证券从业资格证\n    2. 胎教和当一个父亲、做饭\n    3. 钱生钱（理财）\n    4. 提高自己本身技能的书（人工智能、jvm，spring cloud、boot等等）\n    5. 专业之外的书籍（诗经、四书五经、国富论、哲学、传记、佛学等等）\n3. 写代码\n    1. leetcode练习代码\n    2. 项目demo，专业技能只是看书是不够的，要写代码练习\n4. 专业书籍和代码要整理成博客，记录学到了哪些内容\n    1. 比如看书或者敲代码学习到了spring boot的知识要列出来，最好是能用xmind思维导图可以清晰的画出来\n5. 完成工作任务，注：工作上的事情\n6. 运动\n7. 学一门语言\n    1. 英语\n    2. 日语\n8. 写日记做记录，记录生活，记录每天的事项，记录每天的感想，记录整体的感想和安排\n9. 洗脸刷牙，早晚各一次\n10. 看新闻\n11. 感受自然\n12. 写文章，练习自己写文字的能力\n\n### 四、计划\n\n1. 6:00-7:30 洗漱＋看书\n2. 7:40-8:40 地铁听英语（日语）、练习英语（日语）\n3. 8:50-12:00 工作时间\n4. 12:10-13:00 看书或者写代码（leetcode，项目demo），如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来\n5. 13:15-18:15 工作时间\n6. 18:30-19:30 地铁看书\n7. 19:40-20:00 做饭\n8. 20:10-21:00 户外运动，感受自然\n9. 21:15-22:00 看书或者写代码（leetcode，项目demo），要和12:10-13:00的那个区分开来，保证每天都能敲代码。如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来\n10. 22:10-23:00 写日记分享＋写文章（可以短一点）＋写日记\n\n### 五、实质\n\n1. 看书\n2. 健康运动\n3. 写作\n4. 练习使用语言\n5. 家务\n6. 冥想\n\n### 六、看书计划\n\n1. 技术前沿：人工智能、区块链\n2. 经济类：国富论、CPA、中级经济师、证券从业、理财、股票\n3. 传记类：\n4. 历史类：\n5. 哲学类：王阳明心学、佛学\n6. 文学类：唐诗宋词、诗经、四书五经\n7. 法律类：\n8. 技术技能类：多线程与并发、JVM解析、java性能调优、Tomcat、Mysql、Mybatis、分布式（Zookeeper）、MQ、Nosql、Nginx、fastdfs、springboot、springvloed、docker\n\n","source":"_drafts/每天的习惯.md","raw":"---\ntitle: 每天的习惯\ntags:\nreward: true\ntoc: true\n---\n\n## 每天的习惯\n\n\n### 一、梳理原则\n\n1. 要有效的使用时间，比如坐地铁的时候肯定是看不了电脑的，只能看书或者冥想\n2. 要利用所有的时间，早上＋工作日琐碎时间＋地铁＋晚上\n3. 合理安排任务时间，如果对自己的任务很清楚，能完全清楚能多久完成，可以订好时间，如果不清楚自己的任务有哪几部分，那可以先把理清任务，弄清任务的每部分大概花多少时间作为首要任务，比如，今天要写一个部署定时任务道puphago上，我不清楚怎么部署，不知道有哪些步骤，哪些事要做，那今天不会安排这个整个大的项目，需要安排一项任务，”在多少时间内弄清楚这个任务有哪些逻辑，需要耗时多少“。\n4. 每天要做的东西很多，要思考的东西很多，层次也不一，千万不要为了一个太执着，导致时间都浪费在一个上\n以上是对自己目前出现的问题的一个梳理和思路\n\n<!--more-->\n### 二、每天的时间点\n\n1. 每天早上6点起床\n2. 7点40开始上班\n3. 8点40到公司\n4. 梳理当天工作时间内的工作计划和学习计划\n5. 11点半吃饭\n6. 12点吃完\n7. 1点15上班\n8. 6点15下班\n9. 7点20到家\n10. 7点半做饭\n11. 8点做好\n12. 10点写日记和土豪分享\n13. 11点睡觉\n\n### 三、每天要做的事\n\n1. 冥想\n2. 看书\n    1. 中级经济师、证券从业资格证\n    2. 胎教和当一个父亲、做饭\n    3. 钱生钱（理财）\n    4. 提高自己本身技能的书（人工智能、jvm，spring cloud、boot等等）\n    5. 专业之外的书籍（诗经、四书五经、国富论、哲学、传记、佛学等等）\n3. 写代码\n    1. leetcode练习代码\n    2. 项目demo，专业技能只是看书是不够的，要写代码练习\n4. 专业书籍和代码要整理成博客，记录学到了哪些内容\n    1. 比如看书或者敲代码学习到了spring boot的知识要列出来，最好是能用xmind思维导图可以清晰的画出来\n5. 完成工作任务，注：工作上的事情\n6. 运动\n7. 学一门语言\n    1. 英语\n    2. 日语\n8. 写日记做记录，记录生活，记录每天的事项，记录每天的感想，记录整体的感想和安排\n9. 洗脸刷牙，早晚各一次\n10. 看新闻\n11. 感受自然\n12. 写文章，练习自己写文字的能力\n\n### 四、计划\n\n1. 6:00-7:30 洗漱＋看书\n2. 7:40-8:40 地铁听英语（日语）、练习英语（日语）\n3. 8:50-12:00 工作时间\n4. 12:10-13:00 看书或者写代码（leetcode，项目demo），如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来\n5. 13:15-18:15 工作时间\n6. 18:30-19:30 地铁看书\n7. 19:40-20:00 做饭\n8. 20:10-21:00 户外运动，感受自然\n9. 21:15-22:00 看书或者写代码（leetcode，项目demo），要和12:10-13:00的那个区分开来，保证每天都能敲代码。如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来\n10. 22:10-23:00 写日记分享＋写文章（可以短一点）＋写日记\n\n### 五、实质\n\n1. 看书\n2. 健康运动\n3. 写作\n4. 练习使用语言\n5. 家务\n6. 冥想\n\n### 六、看书计划\n\n1. 技术前沿：人工智能、区块链\n2. 经济类：国富论、CPA、中级经济师、证券从业、理财、股票\n3. 传记类：\n4. 历史类：\n5. 哲学类：王阳明心学、佛学\n6. 文学类：唐诗宋词、诗经、四书五经\n7. 法律类：\n8. 技术技能类：多线程与并发、JVM解析、java性能调优、Tomcat、Mysql、Mybatis、分布式（Zookeeper）、MQ、Nosql、Nginx、fastdfs、springboot、springvloed、docker\n\n","slug":"每天的习惯","published":0,"date":"2018-08-14T13:41:40.000Z","updated":"2018-08-15T14:58:59.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wpthz0003y42jhn8x9q12","content":"<h2 id=\"每天的习惯\"><a href=\"#每天的习惯\" class=\"headerlink\" title=\"每天的习惯\"></a>每天的习惯</h2><h3 id=\"一、梳理原则\"><a href=\"#一、梳理原则\" class=\"headerlink\" title=\"一、梳理原则\"></a>一、梳理原则</h3><ol>\n<li>要有效的使用时间，比如坐地铁的时候肯定是看不了电脑的，只能看书或者冥想</li>\n<li>要利用所有的时间，早上＋工作日琐碎时间＋地铁＋晚上</li>\n<li>合理安排任务时间，如果对自己的任务很清楚，能完全清楚能多久完成，可以订好时间，如果不清楚自己的任务有哪几部分，那可以先把理清任务，弄清任务的每部分大概花多少时间作为首要任务，比如，今天要写一个部署定时任务道puphago上，我不清楚怎么部署，不知道有哪些步骤，哪些事要做，那今天不会安排这个整个大的项目，需要安排一项任务，”在多少时间内弄清楚这个任务有哪些逻辑，需要耗时多少“。</li>\n<li>每天要做的东西很多，要思考的东西很多，层次也不一，千万不要为了一个太执着，导致时间都浪费在一个上<br>以上是对自己目前出现的问题的一个梳理和思路</li>\n</ol>\n<span id=\"more\"></span>\n<h3 id=\"二、每天的时间点\"><a href=\"#二、每天的时间点\" class=\"headerlink\" title=\"二、每天的时间点\"></a>二、每天的时间点</h3><ol>\n<li>每天早上6点起床</li>\n<li>7点40开始上班</li>\n<li>8点40到公司</li>\n<li>梳理当天工作时间内的工作计划和学习计划</li>\n<li>11点半吃饭</li>\n<li>12点吃完</li>\n<li>1点15上班</li>\n<li>6点15下班</li>\n<li>7点20到家</li>\n<li>7点半做饭</li>\n<li>8点做好</li>\n<li>10点写日记和土豪分享</li>\n<li>11点睡觉</li>\n</ol>\n<h3 id=\"三、每天要做的事\"><a href=\"#三、每天要做的事\" class=\"headerlink\" title=\"三、每天要做的事\"></a>三、每天要做的事</h3><ol>\n<li>冥想</li>\n<li>看书<ol>\n<li>中级经济师、证券从业资格证</li>\n<li>胎教和当一个父亲、做饭</li>\n<li>钱生钱（理财）</li>\n<li>提高自己本身技能的书（人工智能、jvm，spring cloud、boot等等）</li>\n<li>专业之外的书籍（诗经、四书五经、国富论、哲学、传记、佛学等等）</li>\n</ol>\n</li>\n<li>写代码<ol>\n<li>leetcode练习代码</li>\n<li>项目demo，专业技能只是看书是不够的，要写代码练习</li>\n</ol>\n</li>\n<li>专业书籍和代码要整理成博客，记录学到了哪些内容<ol>\n<li>比如看书或者敲代码学习到了spring boot的知识要列出来，最好是能用xmind思维导图可以清晰的画出来</li>\n</ol>\n</li>\n<li>完成工作任务，注：工作上的事情</li>\n<li>运动</li>\n<li>学一门语言<ol>\n<li>英语</li>\n<li>日语</li>\n</ol>\n</li>\n<li>写日记做记录，记录生活，记录每天的事项，记录每天的感想，记录整体的感想和安排</li>\n<li>洗脸刷牙，早晚各一次</li>\n<li>看新闻</li>\n<li>感受自然</li>\n<li>写文章，练习自己写文字的能力</li>\n</ol>\n<h3 id=\"四、计划\"><a href=\"#四、计划\" class=\"headerlink\" title=\"四、计划\"></a>四、计划</h3><ol>\n<li>6:00-7:30 洗漱＋看书</li>\n<li>7:40-8:40 地铁听英语（日语）、练习英语（日语）</li>\n<li>8:50-12:00 工作时间</li>\n<li>12:10-13:00 看书或者写代码（leetcode，项目demo），如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来</li>\n<li>13:15-18:15 工作时间</li>\n<li>18:30-19:30 地铁看书</li>\n<li>19:40-20:00 做饭</li>\n<li>20:10-21:00 户外运动，感受自然</li>\n<li>21:15-22:00 看书或者写代码（leetcode，项目demo），要和12:10-13:00的那个区分开来，保证每天都能敲代码。如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来</li>\n<li>22:10-23:00 写日记分享＋写文章（可以短一点）＋写日记</li>\n</ol>\n<h3 id=\"五、实质\"><a href=\"#五、实质\" class=\"headerlink\" title=\"五、实质\"></a>五、实质</h3><ol>\n<li>看书</li>\n<li>健康运动</li>\n<li>写作</li>\n<li>练习使用语言</li>\n<li>家务</li>\n<li>冥想</li>\n</ol>\n<h3 id=\"六、看书计划\"><a href=\"#六、看书计划\" class=\"headerlink\" title=\"六、看书计划\"></a>六、看书计划</h3><ol>\n<li>技术前沿：人工智能、区块链</li>\n<li>经济类：国富论、CPA、中级经济师、证券从业、理财、股票</li>\n<li>传记类：</li>\n<li>历史类：</li>\n<li>哲学类：王阳明心学、佛学</li>\n<li>文学类：唐诗宋词、诗经、四书五经</li>\n<li>法律类：</li>\n<li>技术技能类：多线程与并发、JVM解析、java性能调优、Tomcat、Mysql、Mybatis、分布式（Zookeeper）、MQ、Nosql、Nginx、fastdfs、springboot、springvloed、docker</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"每天的习惯\"><a href=\"#每天的习惯\" class=\"headerlink\" title=\"每天的习惯\"></a>每天的习惯</h2><h3 id=\"一、梳理原则\"><a href=\"#一、梳理原则\" class=\"headerlink\" title=\"一、梳理原则\"></a>一、梳理原则</h3><ol>\n<li>要有效的使用时间，比如坐地铁的时候肯定是看不了电脑的，只能看书或者冥想</li>\n<li>要利用所有的时间，早上＋工作日琐碎时间＋地铁＋晚上</li>\n<li>合理安排任务时间，如果对自己的任务很清楚，能完全清楚能多久完成，可以订好时间，如果不清楚自己的任务有哪几部分，那可以先把理清任务，弄清任务的每部分大概花多少时间作为首要任务，比如，今天要写一个部署定时任务道puphago上，我不清楚怎么部署，不知道有哪些步骤，哪些事要做，那今天不会安排这个整个大的项目，需要安排一项任务，”在多少时间内弄清楚这个任务有哪些逻辑，需要耗时多少“。</li>\n<li>每天要做的东西很多，要思考的东西很多，层次也不一，千万不要为了一个太执着，导致时间都浪费在一个上<br>以上是对自己目前出现的问题的一个梳理和思路</li>\n</ol>","more":"<h3 id=\"二、每天的时间点\"><a href=\"#二、每天的时间点\" class=\"headerlink\" title=\"二、每天的时间点\"></a>二、每天的时间点</h3><ol>\n<li>每天早上6点起床</li>\n<li>7点40开始上班</li>\n<li>8点40到公司</li>\n<li>梳理当天工作时间内的工作计划和学习计划</li>\n<li>11点半吃饭</li>\n<li>12点吃完</li>\n<li>1点15上班</li>\n<li>6点15下班</li>\n<li>7点20到家</li>\n<li>7点半做饭</li>\n<li>8点做好</li>\n<li>10点写日记和土豪分享</li>\n<li>11点睡觉</li>\n</ol>\n<h3 id=\"三、每天要做的事\"><a href=\"#三、每天要做的事\" class=\"headerlink\" title=\"三、每天要做的事\"></a>三、每天要做的事</h3><ol>\n<li>冥想</li>\n<li>看书<ol>\n<li>中级经济师、证券从业资格证</li>\n<li>胎教和当一个父亲、做饭</li>\n<li>钱生钱（理财）</li>\n<li>提高自己本身技能的书（人工智能、jvm，spring cloud、boot等等）</li>\n<li>专业之外的书籍（诗经、四书五经、国富论、哲学、传记、佛学等等）</li>\n</ol>\n</li>\n<li>写代码<ol>\n<li>leetcode练习代码</li>\n<li>项目demo，专业技能只是看书是不够的，要写代码练习</li>\n</ol>\n</li>\n<li>专业书籍和代码要整理成博客，记录学到了哪些内容<ol>\n<li>比如看书或者敲代码学习到了spring boot的知识要列出来，最好是能用xmind思维导图可以清晰的画出来</li>\n</ol>\n</li>\n<li>完成工作任务，注：工作上的事情</li>\n<li>运动</li>\n<li>学一门语言<ol>\n<li>英语</li>\n<li>日语</li>\n</ol>\n</li>\n<li>写日记做记录，记录生活，记录每天的事项，记录每天的感想，记录整体的感想和安排</li>\n<li>洗脸刷牙，早晚各一次</li>\n<li>看新闻</li>\n<li>感受自然</li>\n<li>写文章，练习自己写文字的能力</li>\n</ol>\n<h3 id=\"四、计划\"><a href=\"#四、计划\" class=\"headerlink\" title=\"四、计划\"></a>四、计划</h3><ol>\n<li>6:00-7:30 洗漱＋看书</li>\n<li>7:40-8:40 地铁听英语（日语）、练习英语（日语）</li>\n<li>8:50-12:00 工作时间</li>\n<li>12:10-13:00 看书或者写代码（leetcode，项目demo），如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来</li>\n<li>13:15-18:15 工作时间</li>\n<li>18:30-19:30 地铁看书</li>\n<li>19:40-20:00 做饭</li>\n<li>20:10-21:00 户外运动，感受自然</li>\n<li>21:15-22:00 看书或者写代码（leetcode，项目demo），要和12:10-13:00的那个区分开来，保证每天都能敲代码。如果是看的书可以整理成知识，可以先用xmind的画出来或者用markdown工具记录下来</li>\n<li>22:10-23:00 写日记分享＋写文章（可以短一点）＋写日记</li>\n</ol>\n<h3 id=\"五、实质\"><a href=\"#五、实质\" class=\"headerlink\" title=\"五、实质\"></a>五、实质</h3><ol>\n<li>看书</li>\n<li>健康运动</li>\n<li>写作</li>\n<li>练习使用语言</li>\n<li>家务</li>\n<li>冥想</li>\n</ol>\n<h3 id=\"六、看书计划\"><a href=\"#六、看书计划\" class=\"headerlink\" title=\"六、看书计划\"></a>六、看书计划</h3><ol>\n<li>技术前沿：人工智能、区块链</li>\n<li>经济类：国富论、CPA、中级经济师、证券从业、理财、股票</li>\n<li>传记类：</li>\n<li>历史类：</li>\n<li>哲学类：王阳明心学、佛学</li>\n<li>文学类：唐诗宋词、诗经、四书五经</li>\n<li>法律类：</li>\n<li>技术技能类：多线程与并发、JVM解析、java性能调优、Tomcat、Mysql、Mybatis、分布式（Zookeeper）、MQ、Nosql、Nginx、fastdfs、springboot、springvloed、docker</li>\n</ol>"},{"title":"20180901ajax的相关学习","date":"2018-09-01T03:33:20.000Z","reward":true,"toc":true,"_content":"\najax 做post请求时 form使用的serialize()\n其实是传递的是字符串，将form中的元素拼接上\n本想使用FormData的方式但是不能修改数据\n\ncombobox getValue获得不了值，研究下源码\n\njson对象each方法","source":"_posts/20180901ajax的相关学习.md","raw":"---\ntitle: 20180901ajax的相关学习\ndate: 2018-09-01 11:33:20\ntags: \n - 学习\n - ajax\nreward: true\ntoc: true\n---\n\najax 做post请求时 form使用的serialize()\n其实是传递的是字符串，将form中的元素拼接上\n本想使用FormData的方式但是不能修改数据\n\ncombobox getValue获得不了值，研究下源码\n\njson对象each方法","slug":"20180901ajax的相关学习","published":1,"updated":"2018-09-01T04:09:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wpti40007y42j4doq2wl6","content":"<p>ajax 做post请求时 form使用的serialize()<br>其实是传递的是字符串，将form中的元素拼接上<br>本想使用FormData的方式但是不能修改数据</p>\n<p>combobox getValue获得不了值，研究下源码</p>\n<p>json对象each方法</p>\n","site":{"data":{}},"excerpt":"","more":"<p>ajax 做post请求时 form使用的serialize()<br>其实是传递的是字符串，将form中的元素拼接上<br>本想使用FormData的方式但是不能修改数据</p>\n<p>combobox getValue获得不了值，研究下源码</p>\n<p>json对象each方法</p>\n"},{"title":"工作项目之邮件服务解决方案","date":"2019-05-02T02:13:35.000Z","reward":true,"toc":true,"_content":"\n# 工作中邮件服务解决方案\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **最近因为工作项目的缘故，需要在项目中增加发送邮件的功能，本以为只要写个程序，使用smtp发送就可以了，然而，还是我想的太简单了。**\n\n先来说下项目背景\n\n## 背景\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作环境的电脑是windows，在办公网络环境，平时只能用来收发邮件，IM沟通以及其他事务性工作，虽然是工作电脑，由于公司对我们电脑做了管控，电脑不能上网，姑且称这个环境为A环境。平时的开发工作是在vmware horizon view的虚拟化终端里，终端里面的系统是windows7，两个环境，但是是在不同的网段，公司也做了限制，两个环境没法做通信，此环境称为B环境。开发的服务部署在另外一个开发测试环境，可以通过Vmware的终端环境（B环境）访问该环境，但是办公环境没法访问，此环境的系统是AIX系统（unix），暂称C环境。\n\n|环境|特点|\n|:---:|:---|\n|A环境|办公网，可以通过Vmware方式连接B环境，但是连不上C环境，可以访问邮箱服务|\n|B环境|开发测试环境，可以连接C环境，并且可以通过发送TCP协议给C，可以访问邮箱服务|\n|C环境|开发测试环境，可以通过TCP方式与B环境互通，但是不能访问邮箱服务|\n\n***以上环境的特点也是在自己使用smtp协议的程序碰壁后，静下心来好好研究做的一番整理。***\n\n## 要实现的功能\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目是使用springboot开发的一个web项目，项目中有块功能是在某些场景下实现发送邮件通知。邮件要实现以下几个功能：\n\n+ 模块化。邮件单独作为一个模块使用，暴露给调用者使用接口\n+ 富文本化。发送邮件的内容不能只是纯文本的方式，内容要类似网页的方式，可以嵌入图片，字体大小可调节等功能\n+ 全面化。支持发送附件\n\n项目部署在C环境上，由于C环境不能访问邮件服务器，C环境直接发送邮件的方式这条路走不通，所以需要考虑其他实现方式。\n\n## 设计思路\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C不能访问A，所以想通过A发邮件的想法不可能，所以，C可以通过访问B环境，把想发的邮件内容让B发邮件。\n\n```\n\n采用C/S模式，在C环境部署一个发邮件的客户端程序，在B环境部署一个接收发邮件指令并根据指令发邮件的服务端程序。客户端给服务器端发socket报文，服务器端接收报文信息，在开发客户端和服务端的交互上，采用了NIO方式，也是考虑了NIO很强大的性能优势，选用netty作为开发基础包。\n\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 基本的socket通信已经选好了，接下来就是看如何设计报文的格式，以便双方通信，发邮件需要有几项内容：\n\n+ 收件人\n+ 抄送\n+ 秘抄\n+ 主题\n+ 正文内容\n+ 附件\n\n其中邮件内容要可以显示图片、链接，字体样式等内容，附件就发送图片和普通的文档就可以。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 公司使用的outlook，内容可以用html的方式写，html可以展示丰富的内容，所以可以通过html的一些标签样式展示富文本的内容，但是有一个难点，图片是本地的图片，不是网络图片，这个图片怎么才能在html的内容显示出来，另外，附件怎么发送。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 经过一番的研究，附件图片可以转换成base64的字符串，在html的页面中直接引用图片的名字即可，如果附件的图片在html有引用，在outlook看起来，就没有附件，只有正文中的内容加图片，如果图片没有在html中引用到，则会在附件一栏展示\n\n以上问题都解决了，这些字符串的发送以什么格式？这里自己是通过json的方式，将以上内容都放在json中由客户端发送给服务端，服务端解析json就可以，将对应的内容解析出来就可以。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设计下发送的协议：\n\n```\n四位长度信息（json内容的长度）+ json内容\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ***以上是整体的设计思路***\n\n\n## 发送邮件的两种方式\n\n1. 通过SMTP协议发送邮件，很简单。\n2. jacob方式，调用windows下outlook的发送邮件的接口\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/20190502工作项目之解决邮件服务方案.md","raw":"---\ntitle: 工作项目之邮件服务解决方案\ndate: 2019-05-02 10:13:35\ntags: \n - 学习\n - java\nreward: true\ntoc: true\n---\n\n# 工作中邮件服务解决方案\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; **最近因为工作项目的缘故，需要在项目中增加发送邮件的功能，本以为只要写个程序，使用smtp发送就可以了，然而，还是我想的太简单了。**\n\n先来说下项目背景\n\n## 背景\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作环境的电脑是windows，在办公网络环境，平时只能用来收发邮件，IM沟通以及其他事务性工作，虽然是工作电脑，由于公司对我们电脑做了管控，电脑不能上网，姑且称这个环境为A环境。平时的开发工作是在vmware horizon view的虚拟化终端里，终端里面的系统是windows7，两个环境，但是是在不同的网段，公司也做了限制，两个环境没法做通信，此环境称为B环境。开发的服务部署在另外一个开发测试环境，可以通过Vmware的终端环境（B环境）访问该环境，但是办公环境没法访问，此环境的系统是AIX系统（unix），暂称C环境。\n\n|环境|特点|\n|:---:|:---|\n|A环境|办公网，可以通过Vmware方式连接B环境，但是连不上C环境，可以访问邮箱服务|\n|B环境|开发测试环境，可以连接C环境，并且可以通过发送TCP协议给C，可以访问邮箱服务|\n|C环境|开发测试环境，可以通过TCP方式与B环境互通，但是不能访问邮箱服务|\n\n***以上环境的特点也是在自己使用smtp协议的程序碰壁后，静下心来好好研究做的一番整理。***\n\n## 要实现的功能\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;项目是使用springboot开发的一个web项目，项目中有块功能是在某些场景下实现发送邮件通知。邮件要实现以下几个功能：\n\n+ 模块化。邮件单独作为一个模块使用，暴露给调用者使用接口\n+ 富文本化。发送邮件的内容不能只是纯文本的方式，内容要类似网页的方式，可以嵌入图片，字体大小可调节等功能\n+ 全面化。支持发送附件\n\n项目部署在C环境上，由于C环境不能访问邮件服务器，C环境直接发送邮件的方式这条路走不通，所以需要考虑其他实现方式。\n\n## 设计思路\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;C不能访问A，所以想通过A发邮件的想法不可能，所以，C可以通过访问B环境，把想发的邮件内容让B发邮件。\n\n```\n\n采用C/S模式，在C环境部署一个发邮件的客户端程序，在B环境部署一个接收发邮件指令并根据指令发邮件的服务端程序。客户端给服务器端发socket报文，服务器端接收报文信息，在开发客户端和服务端的交互上，采用了NIO方式，也是考虑了NIO很强大的性能优势，选用netty作为开发基础包。\n\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 基本的socket通信已经选好了，接下来就是看如何设计报文的格式，以便双方通信，发邮件需要有几项内容：\n\n+ 收件人\n+ 抄送\n+ 秘抄\n+ 主题\n+ 正文内容\n+ 附件\n\n其中邮件内容要可以显示图片、链接，字体样式等内容，附件就发送图片和普通的文档就可以。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 公司使用的outlook，内容可以用html的方式写，html可以展示丰富的内容，所以可以通过html的一些标签样式展示富文本的内容，但是有一个难点，图片是本地的图片，不是网络图片，这个图片怎么才能在html的内容显示出来，另外，附件怎么发送。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 经过一番的研究，附件图片可以转换成base64的字符串，在html的页面中直接引用图片的名字即可，如果附件的图片在html有引用，在outlook看起来，就没有附件，只有正文中的内容加图片，如果图片没有在html中引用到，则会在附件一栏展示\n\n以上问题都解决了，这些字符串的发送以什么格式？这里自己是通过json的方式，将以上内容都放在json中由客户端发送给服务端，服务端解析json就可以，将对应的内容解析出来就可以。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 设计下发送的协议：\n\n```\n四位长度信息（json内容的长度）+ json内容\n\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ***以上是整体的设计思路***\n\n\n## 发送邮件的两种方式\n\n1. 通过SMTP协议发送邮件，很简单。\n2. jacob方式，调用windows下outlook的发送邮件的接口\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"20190502工作项目之解决邮件服务方案","published":1,"updated":"2019-06-08T07:11:43.295Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wpti50008y42j9fqc59yl","content":"<h1 id=\"工作中邮件服务解决方案\"><a href=\"#工作中邮件服务解决方案\" class=\"headerlink\" title=\"工作中邮件服务解决方案\"></a>工作中邮件服务解决方案</h1><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <strong>最近因为工作项目的缘故，需要在项目中增加发送邮件的功能，本以为只要写个程序，使用smtp发送就可以了，然而，还是我想的太简单了。</strong></p>\n<p>先来说下项目背景</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;工作环境的电脑是windows，在办公网络环境，平时只能用来收发邮件，IM沟通以及其他事务性工作，虽然是工作电脑，由于公司对我们电脑做了管控，电脑不能上网，姑且称这个环境为A环境。平时的开发工作是在vmware horizon view的虚拟化终端里，终端里面的系统是windows7，两个环境，但是是在不同的网段，公司也做了限制，两个环境没法做通信，此环境称为B环境。开发的服务部署在另外一个开发测试环境，可以通过Vmware的终端环境（B环境）访问该环境，但是办公环境没法访问，此环境的系统是AIX系统（unix），暂称C环境。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"left\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">A环境</td>\n<td align=\"left\">办公网，可以通过Vmware方式连接B环境，但是连不上C环境，可以访问邮箱服务</td>\n</tr>\n<tr>\n<td align=\"center\">B环境</td>\n<td align=\"left\">开发测试环境，可以连接C环境，并且可以通过发送TCP协议给C，可以访问邮箱服务</td>\n</tr>\n<tr>\n<td align=\"center\">C环境</td>\n<td align=\"left\">开发测试环境，可以通过TCP方式与B环境互通，但是不能访问邮箱服务</td>\n</tr>\n</tbody></table>\n<p><em><strong>以上环境的特点也是在自己使用smtp协议的程序碰壁后，静下心来好好研究做的一番整理。</strong></em></p>\n<h2 id=\"要实现的功能\"><a href=\"#要实现的功能\" class=\"headerlink\" title=\"要实现的功能\"></a>要实现的功能</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;项目是使用springboot开发的一个web项目，项目中有块功能是在某些场景下实现发送邮件通知。邮件要实现以下几个功能：</p>\n<ul>\n<li>模块化。邮件单独作为一个模块使用，暴露给调用者使用接口</li>\n<li>富文本化。发送邮件的内容不能只是纯文本的方式，内容要类似网页的方式，可以嵌入图片，字体大小可调节等功能</li>\n<li>全面化。支持发送附件</li>\n</ul>\n<p>项目部署在C环境上，由于C环境不能访问邮件服务器，C环境直接发送邮件的方式这条路走不通，所以需要考虑其他实现方式。</p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C不能访问A，所以想通过A发邮件的想法不可能，所以，C可以通过访问B环境，把想发的邮件内容让B发邮件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">采用C/S模式，在C环境部署一个发邮件的客户端程序，在B环境部署一个接收发邮件指令并根据指令发邮件的服务端程序。客户端给服务器端发socket报文，服务器端接收报文信息，在开发客户端和服务端的交互上，采用了NIO方式，也是考虑了NIO很强大的性能优势，选用netty作为开发基础包。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 基本的socket通信已经选好了，接下来就是看如何设计报文的格式，以便双方通信，发邮件需要有几项内容：</p>\n<ul>\n<li>收件人</li>\n<li>抄送</li>\n<li>秘抄</li>\n<li>主题</li>\n<li>正文内容</li>\n<li>附件</li>\n</ul>\n<p>其中邮件内容要可以显示图片、链接，字体样式等内容，附件就发送图片和普通的文档就可以。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 公司使用的outlook，内容可以用html的方式写，html可以展示丰富的内容，所以可以通过html的一些标签样式展示富文本的内容，但是有一个难点，图片是本地的图片，不是网络图片，这个图片怎么才能在html的内容显示出来，另外，附件怎么发送。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 经过一番的研究，附件图片可以转换成base64的字符串，在html的页面中直接引用图片的名字即可，如果附件的图片在html有引用，在outlook看起来，就没有附件，只有正文中的内容加图片，如果图片没有在html中引用到，则会在附件一栏展示</p>\n<p>以上问题都解决了，这些字符串的发送以什么格式？这里自己是通过json的方式，将以上内容都放在json中由客户端发送给服务端，服务端解析json就可以，将对应的内容解析出来就可以。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 设计下发送的协议：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">四位长度信息（json内容的长度）+ json内容</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <em><strong>以上是整体的设计思路</strong></em></p>\n<h2 id=\"发送邮件的两种方式\"><a href=\"#发送邮件的两种方式\" class=\"headerlink\" title=\"发送邮件的两种方式\"></a>发送邮件的两种方式</h2><ol>\n<li>通过SMTP协议发送邮件，很简单。</li>\n<li>jacob方式，调用windows下outlook的发送邮件的接口</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"工作中邮件服务解决方案\"><a href=\"#工作中邮件服务解决方案\" class=\"headerlink\" title=\"工作中邮件服务解决方案\"></a>工作中邮件服务解决方案</h1><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <strong>最近因为工作项目的缘故，需要在项目中增加发送邮件的功能，本以为只要写个程序，使用smtp发送就可以了，然而，还是我想的太简单了。</strong></p>\n<p>先来说下项目背景</p>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;工作环境的电脑是windows，在办公网络环境，平时只能用来收发邮件，IM沟通以及其他事务性工作，虽然是工作电脑，由于公司对我们电脑做了管控，电脑不能上网，姑且称这个环境为A环境。平时的开发工作是在vmware horizon view的虚拟化终端里，终端里面的系统是windows7，两个环境，但是是在不同的网段，公司也做了限制，两个环境没法做通信，此环境称为B环境。开发的服务部署在另外一个开发测试环境，可以通过Vmware的终端环境（B环境）访问该环境，但是办公环境没法访问，此环境的系统是AIX系统（unix），暂称C环境。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">环境</th>\n<th align=\"left\">特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">A环境</td>\n<td align=\"left\">办公网，可以通过Vmware方式连接B环境，但是连不上C环境，可以访问邮箱服务</td>\n</tr>\n<tr>\n<td align=\"center\">B环境</td>\n<td align=\"left\">开发测试环境，可以连接C环境，并且可以通过发送TCP协议给C，可以访问邮箱服务</td>\n</tr>\n<tr>\n<td align=\"center\">C环境</td>\n<td align=\"left\">开发测试环境，可以通过TCP方式与B环境互通，但是不能访问邮箱服务</td>\n</tr>\n</tbody></table>\n<p><em><strong>以上环境的特点也是在自己使用smtp协议的程序碰壁后，静下心来好好研究做的一番整理。</strong></em></p>\n<h2 id=\"要实现的功能\"><a href=\"#要实现的功能\" class=\"headerlink\" title=\"要实现的功能\"></a>要实现的功能</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;项目是使用springboot开发的一个web项目，项目中有块功能是在某些场景下实现发送邮件通知。邮件要实现以下几个功能：</p>\n<ul>\n<li>模块化。邮件单独作为一个模块使用，暴露给调用者使用接口</li>\n<li>富文本化。发送邮件的内容不能只是纯文本的方式，内容要类似网页的方式，可以嵌入图片，字体大小可调节等功能</li>\n<li>全面化。支持发送附件</li>\n</ul>\n<p>项目部署在C环境上，由于C环境不能访问邮件服务器，C环境直接发送邮件的方式这条路走不通，所以需要考虑其他实现方式。</p>\n<h2 id=\"设计思路\"><a href=\"#设计思路\" class=\"headerlink\" title=\"设计思路\"></a>设计思路</h2><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;C不能访问A，所以想通过A发邮件的想法不可能，所以，C可以通过访问B环境，把想发的邮件内容让B发邮件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">采用C/S模式，在C环境部署一个发邮件的客户端程序，在B环境部署一个接收发邮件指令并根据指令发邮件的服务端程序。客户端给服务器端发socket报文，服务器端接收报文信息，在开发客户端和服务端的交互上，采用了NIO方式，也是考虑了NIO很强大的性能优势，选用netty作为开发基础包。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 基本的socket通信已经选好了，接下来就是看如何设计报文的格式，以便双方通信，发邮件需要有几项内容：</p>\n<ul>\n<li>收件人</li>\n<li>抄送</li>\n<li>秘抄</li>\n<li>主题</li>\n<li>正文内容</li>\n<li>附件</li>\n</ul>\n<p>其中邮件内容要可以显示图片、链接，字体样式等内容，附件就发送图片和普通的文档就可以。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 公司使用的outlook，内容可以用html的方式写，html可以展示丰富的内容，所以可以通过html的一些标签样式展示富文本的内容，但是有一个难点，图片是本地的图片，不是网络图片，这个图片怎么才能在html的内容显示出来，另外，附件怎么发送。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 经过一番的研究，附件图片可以转换成base64的字符串，在html的页面中直接引用图片的名字即可，如果附件的图片在html有引用，在outlook看起来，就没有附件，只有正文中的内容加图片，如果图片没有在html中引用到，则会在附件一栏展示</p>\n<p>以上问题都解决了，这些字符串的发送以什么格式？这里自己是通过json的方式，将以上内容都放在json中由客户端发送给服务端，服务端解析json就可以，将对应的内容解析出来就可以。</p>\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 设计下发送的协议：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">四位长度信息（json内容的长度）+ json内容</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <em><strong>以上是整体的设计思路</strong></em></p>\n<h2 id=\"发送邮件的两种方式\"><a href=\"#发送邮件的两种方式\" class=\"headerlink\" title=\"发送邮件的两种方式\"></a>发送邮件的两种方式</h2><ol>\n<li>通过SMTP协议发送邮件，很简单。</li>\n<li>jacob方式，调用windows下outlook的发送邮件的接口</li>\n</ol>\n"},{"title":"20190608DLAN实现简单的投屏功能","date":"2019-06-08T07:14:50.000Z","reward":true,"toc":true,"_content":"\n# DLAN实现简单的投屏功能\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近因为工作的需要，老大让我去研究下电视投屏功能，现在的智能手机都有投屏功能，把图片或者视频投放到电视上或者盒子上。现在我要做的是去研究研究其原理，以便后续在工作中展开工作。\n在网上找了几篇文章：\n\n+ [手机投屏技术原理](https://www.cnblogs.com/dddcai/p/6480799.html)\n+ [Airplay、DLNA和Miracast三种技术的介绍](https://blog.csdn.net/Mini_PRO/article/details/79541353)\n\n看了几个技术的原理，我需要用的是DLAN功能。我要实现个最简单的功能，在我电脑上写段程序，然后将我电脑图片或者网上的图片投屏到我家的小米盒子上。\n\nDLAN的upnp协议，目前有很多实现，我不需要自己写协议的实现，但是需要挑个实现，然后自己去使用，因为习惯使用java，所以选了一个java的实现upnp的开源jar包，cling，其对应的github:[cling](https://github.com/4thline/cling)\n\n基于这个协议的jar包，很顺利的实现了将某个图片发送到小米盒子上。\n\n实现代码如下：\n\n```\npublic class DiscoveryMain {\n\n\tstatic RemoteDevice mDevice;\n\tstatic UpnpService upnpService;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\t// TODO Auto-generated method stub\n\t\tRegistryListener listener = new RegistryListener() {\n\n\t\t\tpublic void remoteDeviceDiscoveryStarted(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Discovery started: \" + device.getDisplayString());\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceDiscoveryFailed(Registry registry, RemoteDevice device, Exception ex) {\n\t\t\t\tSystem.out.println(\"Discovery failed: \" + device.getDisplayString() + \" => \" + ex);\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceAdded(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\n\t\t\t\t\t\t\"Remote device available: \" + device.getDisplayString() + \"; id=\" + device.getIdentity());\n\t\t\t\n\t\t\t\tif(device.getIdentity().getUdn().getIdentifierString().equals(\"F7CA5454-3F48-4390-8009-403e48ea4817\")){\n                    System.out.println(\"find..............\"+device.getIdentity());\n                    if(mDevice == null){\n                        mDevice = device;\n                        Service s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n                        if(s != null)\n                        upnpService.getControlPoint().execute(new SetAVTransportURI(s,\n//                        \t\t\"http://192.168.1.6:8080/IMG_8191_1.png\"\n//                        \t\t\"http://192.168.1.6:8080/bdz.jpg\"\n                        \t\t\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1558568127&di=f997f7a740a5e499b070decc61b0725c&imgtype=jpg&er=1&src=http%3A%2F%2Fphotocdn.sohu.com%2F20150721%2Fmp23627612_1437451852870_2.gif\"\n//                        \t\t\"https://res.chuanying520.com/template/ZXQ-171207-1/sce_prevideo_sm_an.mp4?v=1512713951\"\n                        \t\t//\"http://a.hiphotos.baidu.com/image/h%3D300/sign=a62e824376d98d1069d40a31113eb807/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg\"\n                        \t\t){\n \n                            @Override\n                            public void failure(ActionInvocation arg0, UpnpResponse arg1, String arg2) {\n                                // TODO Auto-generated method stub\n                                System.out.println(\"fail...........................\");\n                            }});\n                    }\n                }\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceUpdated(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Remote device updated: \" + device.getDisplayString() + \"; \" + device.getType());\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceRemoved(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Remote device removed: \" + device.getDisplayString());\n\t\t\t\tif(mDevice!=null) {\n\t\t\t\t\tService s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n\t\t\t\t\tupnpService.getControlPoint().execute(new Stop(s) {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\t\t\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\t\t\tSystem.out.println(\"Failed to stop ....\"+defaultMsg);\n\t\t\t\t\t\t}});\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpublic void localDeviceAdded(Registry registry, LocalDevice device) {\n\t\t\t\tSystem.out.println(\"Local device added: \" + device.getDisplayString());\n\n\t\t\t}\n\n\t\t\tpublic void localDeviceRemoved(Registry registry, LocalDevice device) {\n\t\t\t\tSystem.out.println(\"Local device removed: \" + device.getDisplayString());\n\n\t\t\t}\n\n\t\t\tpublic void beforeShutdown(Registry registry) {\n\t\t\t\tSystem.out.println(\"Before shutdown, the registry has devices: \" + registry.getDevices().size());\n\n\t\t\t}\n\n\t\t\tpublic void afterShutdown() {\n\t\t\t\tSystem.out.println(\"Shutdown of registry complete!\");\n\n\t\t\t}\n\t\t};\n\t\tSystem.out.println(\"Start cling....\");\n//\t\tUpnpService \n\t\tupnpService = new UpnpServiceImpl(listener);\n\t\tupnpService.getControlPoint().search(new STAllHeader());\n\n\t\tSystem.out.println(\"Waiting 50 second before shutting down...\");\n\t\tThread.sleep(50000);\n\t\t\n\t\tif(mDevice!=null) {\n\t\t\tService s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n\t\t\tupnpService.getControlPoint().execute(new Stop(s) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"Failed to stop ....\"+defaultMsg);\n\t\t\t\t}});\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Stop cling...\");\n\t\tupnpService.shutdown();\n\t}\n\n\tpublic static void executeAction(UpnpService upnpService, Service service) {\n\t\tActionInvocation setTargetInvocation = new SetTargetActionInvocation(service);\n\t\t\n\t\tupnpService.getControlPoint().execute(new ActionCallback(setTargetInvocation) {\n\n\t\t\t@Override\n\t\t\tpublic void success(ActionInvocation invocation) {\n\n\t\t\t\tassert invocation.getOutput().length == 0;\n\t\t\t\tSystem.out.println(\"Successfully called action!\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\n\t\t\t\tSystem.err.println(defaultMsg);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic class SetTargetActionInvocation extends ActionInvocation {\n\n\t\tpublic SetTargetActionInvocation(Service service) {\n\t\t\tsuper(service.getAction(\"SetTarget\"));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tsetInput(\"NewTargetValue\",true);\n\t\t\t}catch(InvalidValueException ex) {\n\t\t\t\tSystem.err.println(ex.getMessage());\n\t\t\t\tSystem.exit(-1);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n```\n","source":"_posts/20190608DLAN实现简单的投屏功能.md","raw":"---\ntitle: 20190608DLAN实现简单的投屏功能\ndate: 2019-06-08 15:14:50\ntags: \n - 学习\n - java\nreward: true\ntoc: true\n---\n\n# DLAN实现简单的投屏功能\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近因为工作的需要，老大让我去研究下电视投屏功能，现在的智能手机都有投屏功能，把图片或者视频投放到电视上或者盒子上。现在我要做的是去研究研究其原理，以便后续在工作中展开工作。\n在网上找了几篇文章：\n\n+ [手机投屏技术原理](https://www.cnblogs.com/dddcai/p/6480799.html)\n+ [Airplay、DLNA和Miracast三种技术的介绍](https://blog.csdn.net/Mini_PRO/article/details/79541353)\n\n看了几个技术的原理，我需要用的是DLAN功能。我要实现个最简单的功能，在我电脑上写段程序，然后将我电脑图片或者网上的图片投屏到我家的小米盒子上。\n\nDLAN的upnp协议，目前有很多实现，我不需要自己写协议的实现，但是需要挑个实现，然后自己去使用，因为习惯使用java，所以选了一个java的实现upnp的开源jar包，cling，其对应的github:[cling](https://github.com/4thline/cling)\n\n基于这个协议的jar包，很顺利的实现了将某个图片发送到小米盒子上。\n\n实现代码如下：\n\n```\npublic class DiscoveryMain {\n\n\tstatic RemoteDevice mDevice;\n\tstatic UpnpService upnpService;\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\t// TODO Auto-generated method stub\n\t\tRegistryListener listener = new RegistryListener() {\n\n\t\t\tpublic void remoteDeviceDiscoveryStarted(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Discovery started: \" + device.getDisplayString());\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceDiscoveryFailed(Registry registry, RemoteDevice device, Exception ex) {\n\t\t\t\tSystem.out.println(\"Discovery failed: \" + device.getDisplayString() + \" => \" + ex);\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceAdded(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\n\t\t\t\t\t\t\"Remote device available: \" + device.getDisplayString() + \"; id=\" + device.getIdentity());\n\t\t\t\n\t\t\t\tif(device.getIdentity().getUdn().getIdentifierString().equals(\"F7CA5454-3F48-4390-8009-403e48ea4817\")){\n                    System.out.println(\"find..............\"+device.getIdentity());\n                    if(mDevice == null){\n                        mDevice = device;\n                        Service s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n                        if(s != null)\n                        upnpService.getControlPoint().execute(new SetAVTransportURI(s,\n//                        \t\t\"http://192.168.1.6:8080/IMG_8191_1.png\"\n//                        \t\t\"http://192.168.1.6:8080/bdz.jpg\"\n                        \t\t\"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1558568127&di=f997f7a740a5e499b070decc61b0725c&imgtype=jpg&er=1&src=http%3A%2F%2Fphotocdn.sohu.com%2F20150721%2Fmp23627612_1437451852870_2.gif\"\n//                        \t\t\"https://res.chuanying520.com/template/ZXQ-171207-1/sce_prevideo_sm_an.mp4?v=1512713951\"\n                        \t\t//\"http://a.hiphotos.baidu.com/image/h%3D300/sign=a62e824376d98d1069d40a31113eb807/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg\"\n                        \t\t){\n \n                            @Override\n                            public void failure(ActionInvocation arg0, UpnpResponse arg1, String arg2) {\n                                // TODO Auto-generated method stub\n                                System.out.println(\"fail...........................\");\n                            }});\n                    }\n                }\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceUpdated(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Remote device updated: \" + device.getDisplayString() + \"; \" + device.getType());\n\t\t\t}\n\n\t\t\tpublic void remoteDeviceRemoved(Registry registry, RemoteDevice device) {\n\t\t\t\tSystem.out.println(\"Remote device removed: \" + device.getDisplayString());\n\t\t\t\tif(mDevice!=null) {\n\t\t\t\t\tService s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n\t\t\t\t\tupnpService.getControlPoint().execute(new Stop(s) {\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\t\t\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\t\t\tSystem.out.println(\"Failed to stop ....\"+defaultMsg);\n\t\t\t\t\t\t}});\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tpublic void localDeviceAdded(Registry registry, LocalDevice device) {\n\t\t\t\tSystem.out.println(\"Local device added: \" + device.getDisplayString());\n\n\t\t\t}\n\n\t\t\tpublic void localDeviceRemoved(Registry registry, LocalDevice device) {\n\t\t\t\tSystem.out.println(\"Local device removed: \" + device.getDisplayString());\n\n\t\t\t}\n\n\t\t\tpublic void beforeShutdown(Registry registry) {\n\t\t\t\tSystem.out.println(\"Before shutdown, the registry has devices: \" + registry.getDevices().size());\n\n\t\t\t}\n\n\t\t\tpublic void afterShutdown() {\n\t\t\t\tSystem.out.println(\"Shutdown of registry complete!\");\n\n\t\t\t}\n\t\t};\n\t\tSystem.out.println(\"Start cling....\");\n//\t\tUpnpService \n\t\tupnpService = new UpnpServiceImpl(listener);\n\t\tupnpService.getControlPoint().search(new STAllHeader());\n\n\t\tSystem.out.println(\"Waiting 50 second before shutting down...\");\n\t\tThread.sleep(50000);\n\t\t\n\t\tif(mDevice!=null) {\n\t\t\tService s = mDevice.findService(new UDAServiceId(\"AVTransport\"));\n\t\t\tupnpService.getControlPoint().execute(new Stop(s) {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\t\t\t\t\t// TODO Auto-generated method stub\n\t\t\t\t\tSystem.out.println(\"Failed to stop ....\"+defaultMsg);\n\t\t\t\t}});\n\t\t}\n\t\t\n\t\tSystem.out.println(\"Stop cling...\");\n\t\tupnpService.shutdown();\n\t}\n\n\tpublic static void executeAction(UpnpService upnpService, Service service) {\n\t\tActionInvocation setTargetInvocation = new SetTargetActionInvocation(service);\n\t\t\n\t\tupnpService.getControlPoint().execute(new ActionCallback(setTargetInvocation) {\n\n\t\t\t@Override\n\t\t\tpublic void success(ActionInvocation invocation) {\n\n\t\t\t\tassert invocation.getOutput().length == 0;\n\t\t\t\tSystem.out.println(\"Successfully called action!\");\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {\n\n\t\t\t\tSystem.err.println(defaultMsg);\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic class SetTargetActionInvocation extends ActionInvocation {\n\n\t\tpublic SetTargetActionInvocation(Service service) {\n\t\t\tsuper(service.getAction(\"SetTarget\"));\n\t\t\t\n\t\t\ttry {\n\t\t\t\tsetInput(\"NewTargetValue\",true);\n\t\t\t}catch(InvalidValueException ex) {\n\t\t\t\tSystem.err.println(ex.getMessage());\n\t\t\t\tSystem.exit(-1);\n\t\t\t}\n\t\t}\n\t\t\n\t}\n}\n```\n","slug":"20190608DLAN实现简单的投屏功能","published":1,"updated":"2019-06-08T07:41:08.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptik000jy42jhjma44rt","content":"<h1 id=\"DLAN实现简单的投屏功能\"><a href=\"#DLAN实现简单的投屏功能\" class=\"headerlink\" title=\"DLAN实现简单的投屏功能\"></a>DLAN实现简单的投屏功能</h1><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近因为工作的需要，老大让我去研究下电视投屏功能，现在的智能手机都有投屏功能，把图片或者视频投放到电视上或者盒子上。现在我要做的是去研究研究其原理，以便后续在工作中展开工作。<br>在网上找了几篇文章：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/dddcai/p/6480799.html\">手机投屏技术原理</a></li>\n<li><a href=\"https://blog.csdn.net/Mini_PRO/article/details/79541353\">Airplay、DLNA和Miracast三种技术的介绍</a></li>\n</ul>\n<p>看了几个技术的原理，我需要用的是DLAN功能。我要实现个最简单的功能，在我电脑上写段程序，然后将我电脑图片或者网上的图片投屏到我家的小米盒子上。</p>\n<p>DLAN的upnp协议，目前有很多实现，我不需要自己写协议的实现，但是需要挑个实现，然后自己去使用，因为习惯使用java，所以选了一个java的实现upnp的开源jar包，cling，其对应的github:<a href=\"https://github.com/4thline/cling\">cling</a></p>\n<p>基于这个协议的jar包，很顺利的实现了将某个图片发送到小米盒子上。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DiscoveryMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic RemoteDevice mDevice;</span><br><span class=\"line\">\tstatic UpnpService upnpService;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tRegistryListener listener = new RegistryListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceDiscoveryStarted(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Discovery started: &quot; + device.getDisplayString());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceDiscoveryFailed(Registry registry, RemoteDevice device, Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Discovery failed: &quot; + device.getDisplayString() + &quot; =&gt; &quot; + ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceAdded(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Remote device available: &quot; + device.getDisplayString() + &quot;; id=&quot; + device.getIdentity());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t\tif(device.getIdentity().getUdn().getIdentifierString().equals(&quot;F7CA5454-3F48-4390-8009-403e48ea4817&quot;))&#123;</span><br><span class=\"line\">                    System.out.println(&quot;find..............&quot;+device.getIdentity());</span><br><span class=\"line\">                    if(mDevice == null)&#123;</span><br><span class=\"line\">                        mDevice = device;</span><br><span class=\"line\">                        Service s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">                        if(s != null)</span><br><span class=\"line\">                        upnpService.getControlPoint().execute(new SetAVTransportURI(s,</span><br><span class=\"line\">//                        \t\t&quot;http://192.168.1.6:8080/IMG_8191_1.png&quot;</span><br><span class=\"line\">//                        \t\t&quot;http://192.168.1.6:8080/bdz.jpg&quot;</span><br><span class=\"line\">                        \t\t&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1558568127&amp;di=f997f7a740a5e499b070decc61b0725c&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fphotocdn.sohu.com%2F20150721%2Fmp23627612_1437451852870_2.gif&quot;</span><br><span class=\"line\">//                        \t\t&quot;https://res.chuanying520.com/template/ZXQ-171207-1/sce_prevideo_sm_an.mp4?v=1512713951&quot;</span><br><span class=\"line\">                        \t\t//&quot;http://a.hiphotos.baidu.com/image/h%3D300/sign=a62e824376d98d1069d40a31113eb807/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg&quot;</span><br><span class=\"line\">                        \t\t)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                            @Override</span><br><span class=\"line\">                            public void failure(ActionInvocation arg0, UpnpResponse arg1, String arg2) &#123;</span><br><span class=\"line\">                                // TODO Auto-generated method stub</span><br><span class=\"line\">                                System.out.println(&quot;fail...........................&quot;);</span><br><span class=\"line\">                            &#125;&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceUpdated(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Remote device updated: &quot; + device.getDisplayString() + &quot;; &quot; + device.getType());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceRemoved(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Remote device removed: &quot; + device.getDisplayString());</span><br><span class=\"line\">\t\t\t\tif(mDevice!=null) &#123;</span><br><span class=\"line\">\t\t\t\t\tService s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">\t\t\t\t\tupnpService.getControlPoint().execute(new Stop(s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(&quot;Failed to stop ....&quot;+defaultMsg);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void localDeviceAdded(Registry registry, LocalDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Local device added: &quot; + device.getDisplayString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void localDeviceRemoved(Registry registry, LocalDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Local device removed: &quot; + device.getDisplayString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void beforeShutdown(Registry registry) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Before shutdown, the registry has devices: &quot; + registry.getDevices().size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void afterShutdown() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Shutdown of registry complete!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Start cling....&quot;);</span><br><span class=\"line\">//\t\tUpnpService </span><br><span class=\"line\">\t\tupnpService = new UpnpServiceImpl(listener);</span><br><span class=\"line\">\t\tupnpService.getControlPoint().search(new STAllHeader());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(&quot;Waiting 50 second before shutting down...&quot;);</span><br><span class=\"line\">\t\tThread.sleep(50000);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(mDevice!=null) &#123;</span><br><span class=\"line\">\t\t\tService s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">\t\t\tupnpService.getControlPoint().execute(new Stop(s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;Failed to stop ....&quot;+defaultMsg);</span><br><span class=\"line\">\t\t\t\t&#125;&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Stop cling...&quot;);</span><br><span class=\"line\">\t\tupnpService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void executeAction(UpnpService upnpService, Service service) &#123;</span><br><span class=\"line\">\t\tActionInvocation setTargetInvocation = new SetTargetActionInvocation(service);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tupnpService.getControlPoint().execute(new ActionCallback(setTargetInvocation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void success(ActionInvocation invocation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tassert invocation.getOutput().length == 0;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Successfully called action!&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.err.println(defaultMsg);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic class SetTargetActionInvocation extends ActionInvocation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic SetTargetActionInvocation(Service service) &#123;</span><br><span class=\"line\">\t\t\tsuper(service.getAction(&quot;SetTarget&quot;));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tsetInput(&quot;NewTargetValue&quot;,true);</span><br><span class=\"line\">\t\t\t&#125;catch(InvalidValueException ex) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.err.println(ex.getMessage());</span><br><span class=\"line\">\t\t\t\tSystem.exit(-1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"DLAN实现简单的投屏功能\"><a href=\"#DLAN实现简单的投屏功能\" class=\"headerlink\" title=\"DLAN实现简单的投屏功能\"></a>DLAN实现简单的投屏功能</h1><p>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;最近因为工作的需要，老大让我去研究下电视投屏功能，现在的智能手机都有投屏功能，把图片或者视频投放到电视上或者盒子上。现在我要做的是去研究研究其原理，以便后续在工作中展开工作。<br>在网上找了几篇文章：</p>\n<ul>\n<li><a href=\"https://www.cnblogs.com/dddcai/p/6480799.html\">手机投屏技术原理</a></li>\n<li><a href=\"https://blog.csdn.net/Mini_PRO/article/details/79541353\">Airplay、DLNA和Miracast三种技术的介绍</a></li>\n</ul>\n<p>看了几个技术的原理，我需要用的是DLAN功能。我要实现个最简单的功能，在我电脑上写段程序，然后将我电脑图片或者网上的图片投屏到我家的小米盒子上。</p>\n<p>DLAN的upnp协议，目前有很多实现，我不需要自己写协议的实现，但是需要挑个实现，然后自己去使用，因为习惯使用java，所以选了一个java的实现upnp的开源jar包，cling，其对应的github:<a href=\"https://github.com/4thline/cling\">cling</a></p>\n<p>基于这个协议的jar包，很顺利的实现了将某个图片发送到小米盒子上。</p>\n<p>实现代码如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class DiscoveryMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic RemoteDevice mDevice;</span><br><span class=\"line\">\tstatic UpnpService upnpService;</span><br><span class=\"line\">\tpublic static void main(String[] args) throws InterruptedException &#123;</span><br><span class=\"line\">\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\tRegistryListener listener = new RegistryListener() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceDiscoveryStarted(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Discovery started: &quot; + device.getDisplayString());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceDiscoveryFailed(Registry registry, RemoteDevice device, Exception ex) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Discovery failed: &quot; + device.getDisplayString() + &quot; =&gt; &quot; + ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceAdded(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(</span><br><span class=\"line\">\t\t\t\t\t\t&quot;Remote device available: &quot; + device.getDisplayString() + &quot;; id=&quot; + device.getIdentity());</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t\tif(device.getIdentity().getUdn().getIdentifierString().equals(&quot;F7CA5454-3F48-4390-8009-403e48ea4817&quot;))&#123;</span><br><span class=\"line\">                    System.out.println(&quot;find..............&quot;+device.getIdentity());</span><br><span class=\"line\">                    if(mDevice == null)&#123;</span><br><span class=\"line\">                        mDevice = device;</span><br><span class=\"line\">                        Service s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">                        if(s != null)</span><br><span class=\"line\">                        upnpService.getControlPoint().execute(new SetAVTransportURI(s,</span><br><span class=\"line\">//                        \t\t&quot;http://192.168.1.6:8080/IMG_8191_1.png&quot;</span><br><span class=\"line\">//                        \t\t&quot;http://192.168.1.6:8080/bdz.jpg&quot;</span><br><span class=\"line\">                        \t\t&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1558568127&amp;di=f997f7a740a5e499b070decc61b0725c&amp;imgtype=jpg&amp;er=1&amp;src=http%3A%2F%2Fphotocdn.sohu.com%2F20150721%2Fmp23627612_1437451852870_2.gif&quot;</span><br><span class=\"line\">//                        \t\t&quot;https://res.chuanying520.com/template/ZXQ-171207-1/sce_prevideo_sm_an.mp4?v=1512713951&quot;</span><br><span class=\"line\">                        \t\t//&quot;http://a.hiphotos.baidu.com/image/h%3D300/sign=a62e824376d98d1069d40a31113eb807/838ba61ea8d3fd1fc9c7b6853a4e251f94ca5f46.jpg&quot;</span><br><span class=\"line\">                        \t\t)&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">                            @Override</span><br><span class=\"line\">                            public void failure(ActionInvocation arg0, UpnpResponse arg1, String arg2) &#123;</span><br><span class=\"line\">                                // TODO Auto-generated method stub</span><br><span class=\"line\">                                System.out.println(&quot;fail...........................&quot;);</span><br><span class=\"line\">                            &#125;&#125;);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceUpdated(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Remote device updated: &quot; + device.getDisplayString() + &quot;; &quot; + device.getType());</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void remoteDeviceRemoved(Registry registry, RemoteDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Remote device removed: &quot; + device.getDisplayString());</span><br><span class=\"line\">\t\t\t\tif(mDevice!=null) &#123;</span><br><span class=\"line\">\t\t\t\t\tService s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">\t\t\t\t\tupnpService.getControlPoint().execute(new Stop(s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\t\t\t\tSystem.out.println(&quot;Failed to stop ....&quot;+defaultMsg);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void localDeviceAdded(Registry registry, LocalDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Local device added: &quot; + device.getDisplayString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void localDeviceRemoved(Registry registry, LocalDevice device) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Local device removed: &quot; + device.getDisplayString());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void beforeShutdown(Registry registry) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Before shutdown, the registry has devices: &quot; + registry.getDevices().size());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpublic void afterShutdown() &#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Shutdown of registry complete!&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Start cling....&quot;);</span><br><span class=\"line\">//\t\tUpnpService </span><br><span class=\"line\">\t\tupnpService = new UpnpServiceImpl(listener);</span><br><span class=\"line\">\t\tupnpService.getControlPoint().search(new STAllHeader());</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tSystem.out.println(&quot;Waiting 50 second before shutting down...&quot;);</span><br><span class=\"line\">\t\tThread.sleep(50000);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif(mDevice!=null) &#123;</span><br><span class=\"line\">\t\t\tService s = mDevice.findService(new UDAServiceId(&quot;AVTransport&quot;));</span><br><span class=\"line\">\t\t\tupnpService.getControlPoint().execute(new Stop(s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t@Override</span><br><span class=\"line\">\t\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\">\t\t\t\t\t// TODO Auto-generated method stub</span><br><span class=\"line\">\t\t\t\t\tSystem.out.println(&quot;Failed to stop ....&quot;+defaultMsg);</span><br><span class=\"line\">\t\t\t\t&#125;&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Stop cling...&quot;);</span><br><span class=\"line\">\t\tupnpService.shutdown();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void executeAction(UpnpService upnpService, Service service) &#123;</span><br><span class=\"line\">\t\tActionInvocation setTargetInvocation = new SetTargetActionInvocation(service);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tupnpService.getControlPoint().execute(new ActionCallback(setTargetInvocation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void success(ActionInvocation invocation) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tassert invocation.getOutput().length == 0;</span><br><span class=\"line\">\t\t\t\tSystem.out.println(&quot;Successfully called action!&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t@Override</span><br><span class=\"line\">\t\t\tpublic void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tSystem.err.println(defaultMsg);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tstatic class SetTargetActionInvocation extends ActionInvocation &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tpublic SetTargetActionInvocation(Service service) &#123;</span><br><span class=\"line\">\t\t\tsuper(service.getAction(&quot;SetTarget&quot;));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\ttry &#123;</span><br><span class=\"line\">\t\t\t\tsetInput(&quot;NewTargetValue&quot;,true);</span><br><span class=\"line\">\t\t\t&#125;catch(InvalidValueException ex) &#123;</span><br><span class=\"line\">\t\t\t\tSystem.err.println(ex.getMessage());</span><br><span class=\"line\">\t\t\t\tSystem.exit(-1);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-07-23T17:16:08.000Z","updated":"2018-07-23T17:16:08.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptil000ky42japgy7tmz","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo博客整理（一）","date":"2018-07-25T14:47:24.000Z","reward":true,"toc":true,"_content":"## 博客功能添加纪录\n```\n* 增加了gitments评论功能\n* 增加了头像和网页title的头像\n* 添加了一些学习的链接在友链里面\n* 增加了contactme页面\n* 增加了文章导航功能\n```\n","source":"_posts/hexo博客整理（一）.md","raw":"---\ntitle: hexo博客整理（一）\ndate: 2018-07-25 22:47:24\ntags: 博客优化\nreward: true\ntoc: true\n---\n## 博客功能添加纪录\n```\n* 增加了gitments评论功能\n* 增加了头像和网页title的头像\n* 添加了一些学习的链接在友链里面\n* 增加了contactme页面\n* 增加了文章导航功能\n```\n","slug":"hexo博客整理（一）","published":1,"updated":"2018-07-31T15:24:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptin000my42jaqut5cm5","content":"<h2 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 增加了gitments评论功能</span><br><span class=\"line\">* 增加了头像和网页title的头像</span><br><span class=\"line\">* 添加了一些学习的链接在友链里面</span><br><span class=\"line\">* 增加了contactme页面</span><br><span class=\"line\">* 增加了文章导航功能</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 增加了gitments评论功能</span><br><span class=\"line\">* 增加了头像和网页title的头像</span><br><span class=\"line\">* 添加了一些学习的链接在友链里面</span><br><span class=\"line\">* 增加了contactme页面</span><br><span class=\"line\">* 增加了文章导航功能</span><br></pre></td></tr></table></figure>\n"},{"title":"hexo博客整理（三）","date":"2018-07-31T15:54:23.000Z","reward":true,"toc":true,"_content":"\n# 博客功能添加纪录\n\n```\n1. 增加了没篇文章的目录功能\n2. 增加了在主页列表中，比较长的文章只显示部分的功能，使用<!--more-->\n```\n\n<!--more-->\n","source":"_posts/hexo博客整理（三）.md","raw":"---\ntitle: hexo博客整理（三）\ndate: 2018-07-31 23:54:23\ntags:\nreward: true\ntoc: true\n---\n\n# 博客功能添加纪录\n\n```\n1. 增加了没篇文章的目录功能\n2. 增加了在主页列表中，比较长的文章只显示部分的功能，使用<!--more-->\n```\n\n<!--more-->\n","slug":"hexo博客整理（三）","published":1,"updated":"2018-08-14T13:46:31.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptio000oy42j0owb6pp7","content":"<h1 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 增加了没篇文章的目录功能</span><br><span class=\"line\">2. 增加了在主页列表中，比较长的文章只显示部分的功能，使用&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n","site":{"data":{}},"excerpt":"<h1 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 增加了没篇文章的目录功能</span><br><span class=\"line\">2. 增加了在主页列表中，比较长的文章只显示部分的功能，使用&lt;!--more--&gt;</span><br></pre></td></tr></table></figure>","more":""},{"title":"hexo博客整理（二）","date":"2018-07-26T12:39:41.000Z","reward":true,"toc":true,"_content":"\n# 博客功能添加纪录\n\n主要增加以下功能\n\n* 添加了不蒜子计算网站访问量的功能\n","source":"_posts/hexo博客整理（二）.md","raw":"---\ntitle: hexo博客整理（二）\ndate: 2018-07-26 20:39:41\ntags: 博客优化\nreward: true\ntoc: true\n---\n\n# 博客功能添加纪录\n\n主要增加以下功能\n\n* 添加了不蒜子计算网站访问量的功能\n","slug":"hexo博客整理（二）","published":1,"updated":"2018-07-31T15:24:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptip000qy42j2y3g1vu8","content":"<h1 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h1><p>主要增加以下功能</p>\n<ul>\n<li>添加了不蒜子计算网站访问量的功能</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"博客功能添加纪录\"><a href=\"#博客功能添加纪录\" class=\"headerlink\" title=\"博客功能添加纪录\"></a>博客功能添加纪录</h1><p>主要增加以下功能</p>\n<ul>\n<li>添加了不蒜子计算网站访问量的功能</li>\n</ul>\n"},{"title":"learning","date":"2018-07-23T17:16:57.000Z","toc":true,"reward":true,"_content":"\n## Welcome to Chaseton GitHub Pages\n###### **土豪**，快来点击我的[个人博客](https://chaseton.github.io)\n### 个人关联主页\n我的*LeetCode*.[请点击](https://leetcode-cn.com/chaseton/)\n\n我的*stackoverflow*.[请点击](https://stackoverflow.com/users/10114995/chaseton)\n\n\n### 心得与收获\n\n```markdown\n要记得建立github的初衷，不忘初心，方得始终\n\n要坚持做的事\n1. 每天登陆Leetcode，刷三个算法，看社区\n2. 每天登陆stackoverflow，做到可以回答别人问题和自己提问题\n\n资源搜索网站\n1. 57fx(https://www.57fx.com/)\n2. ip_lookup(https://www.ipaddress.com/ip-lookup/)\n```\n------------------\n\n\n### 20180722\n * [浏览的网站：为什么你应该用Markdown写作？](https://www.jianshu.com/p/2e52f1fae9ff)\n * 下载了免费的markdown的编辑软件macdown，确实很好用\n * [Markdown 语法整理大集合2017](https://www.jianshu.com/p/b03a8d7b1719)\n * [Markdown 语法说明](https://www.appinn.com/markdown/#html)\n * [利用 GitHub Pages 快速搭建个人博客](https://www.jianshu.com/p/e68fba58f75c)\n\n\n\n|      日期      | 浏览的网站  | 做的事 |\n|:-------------:|:--------------- | :-------------|\n| 20180722      | 为什么你应该用Markdown写作？(https://www.jianshu.com/p/2e52f1fae9ff) |         下载了免费的markdown的编辑软件macdown，确实很好用 |\n| 20180723      |        |            |\n| 20180724      |        |            |\n\n","source":"_posts/learning.md","raw":"---\ntitle: learning\ndate: 2018-07-24 01:16:57\ntoc: true\ncategories: \n- 学习\ntags: 随笔\nreward: true\n---\n\n## Welcome to Chaseton GitHub Pages\n###### **土豪**，快来点击我的[个人博客](https://chaseton.github.io)\n### 个人关联主页\n我的*LeetCode*.[请点击](https://leetcode-cn.com/chaseton/)\n\n我的*stackoverflow*.[请点击](https://stackoverflow.com/users/10114995/chaseton)\n\n\n### 心得与收获\n\n```markdown\n要记得建立github的初衷，不忘初心，方得始终\n\n要坚持做的事\n1. 每天登陆Leetcode，刷三个算法，看社区\n2. 每天登陆stackoverflow，做到可以回答别人问题和自己提问题\n\n资源搜索网站\n1. 57fx(https://www.57fx.com/)\n2. ip_lookup(https://www.ipaddress.com/ip-lookup/)\n```\n------------------\n\n\n### 20180722\n * [浏览的网站：为什么你应该用Markdown写作？](https://www.jianshu.com/p/2e52f1fae9ff)\n * 下载了免费的markdown的编辑软件macdown，确实很好用\n * [Markdown 语法整理大集合2017](https://www.jianshu.com/p/b03a8d7b1719)\n * [Markdown 语法说明](https://www.appinn.com/markdown/#html)\n * [利用 GitHub Pages 快速搭建个人博客](https://www.jianshu.com/p/e68fba58f75c)\n\n\n\n|      日期      | 浏览的网站  | 做的事 |\n|:-------------:|:--------------- | :-------------|\n| 20180722      | 为什么你应该用Markdown写作？(https://www.jianshu.com/p/2e52f1fae9ff) |         下载了免费的markdown的编辑软件macdown，确实很好用 |\n| 20180723      |        |            |\n| 20180724      |        |            |\n\n","slug":"learning","published":1,"updated":"2018-07-25T15:13:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptiq000ry42j2t3rdoa7","content":"<h2 id=\"Welcome-to-Chaseton-GitHub-Pages\"><a href=\"#Welcome-to-Chaseton-GitHub-Pages\" class=\"headerlink\" title=\"Welcome to Chaseton GitHub Pages\"></a>Welcome to Chaseton GitHub Pages</h2><h6 id=\"土豪，快来点击我的个人博客\"><a href=\"#土豪，快来点击我的个人博客\" class=\"headerlink\" title=\"土豪，快来点击我的个人博客\"></a><strong>土豪</strong>，快来点击我的<a href=\"https://chaseton.github.io/\">个人博客</a></h6><h3 id=\"个人关联主页\"><a href=\"#个人关联主页\" class=\"headerlink\" title=\"个人关联主页\"></a>个人关联主页</h3><p>我的<em>LeetCode</em>.<a href=\"https://leetcode-cn.com/chaseton/\">请点击</a></p>\n<p>我的<em>stackoverflow</em>.<a href=\"https://stackoverflow.com/users/10114995/chaseton\">请点击</a></p>\n<h3 id=\"心得与收获\"><a href=\"#心得与收获\" class=\"headerlink\" title=\"心得与收获\"></a>心得与收获</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要记得建立github的初衷，不忘初心，方得始终</span><br><span class=\"line\"></span><br><span class=\"line\">要坚持做的事</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 每天登陆Leetcode，刷三个算法，看社区</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 每天登陆stackoverflow，做到可以回答别人问题和自己提问题</span><br><span class=\"line\"></span><br><span class=\"line\">资源搜索网站</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 57fx(https://www.57fx.com/)</span><br><span class=\"line\"><span class=\"bullet\">2.</span> ip<span class=\"emphasis\">_lookup(https://www.ipaddress.com/ip-lookup/)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"20180722\"><a href=\"#20180722\" class=\"headerlink\" title=\"20180722\"></a>20180722</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/2e52f1fae9ff\">浏览的网站：为什么你应该用Markdown写作？</a></li>\n<li>下载了免费的markdown的编辑软件macdown，确实很好用</li>\n<li><a href=\"https://www.jianshu.com/p/b03a8d7b1719\">Markdown 语法整理大集合2017</a></li>\n<li><a href=\"https://www.appinn.com/markdown/#html\">Markdown 语法说明</a></li>\n<li><a href=\"https://www.jianshu.com/p/e68fba58f75c\">利用 GitHub Pages 快速搭建个人博客</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">日期</th>\n<th align=\"left\">浏览的网站</th>\n<th align=\"left\">做的事</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20180722</td>\n<td align=\"left\">为什么你应该用Markdown写作？(<a href=\"https://www.jianshu.com/p/2e52f1fae9ff\">https://www.jianshu.com/p/2e52f1fae9ff</a>)</td>\n<td align=\"left\">下载了免费的markdown的编辑软件macdown，确实很好用</td>\n</tr>\n<tr>\n<td align=\"center\">20180723</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">20180724</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Welcome-to-Chaseton-GitHub-Pages\"><a href=\"#Welcome-to-Chaseton-GitHub-Pages\" class=\"headerlink\" title=\"Welcome to Chaseton GitHub Pages\"></a>Welcome to Chaseton GitHub Pages</h2><h6 id=\"土豪，快来点击我的个人博客\"><a href=\"#土豪，快来点击我的个人博客\" class=\"headerlink\" title=\"土豪，快来点击我的个人博客\"></a><strong>土豪</strong>，快来点击我的<a href=\"https://chaseton.github.io/\">个人博客</a></h6><h3 id=\"个人关联主页\"><a href=\"#个人关联主页\" class=\"headerlink\" title=\"个人关联主页\"></a>个人关联主页</h3><p>我的<em>LeetCode</em>.<a href=\"https://leetcode-cn.com/chaseton/\">请点击</a></p>\n<p>我的<em>stackoverflow</em>.<a href=\"https://stackoverflow.com/users/10114995/chaseton\">请点击</a></p>\n<h3 id=\"心得与收获\"><a href=\"#心得与收获\" class=\"headerlink\" title=\"心得与收获\"></a>心得与收获</h3><figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">要记得建立github的初衷，不忘初心，方得始终</span><br><span class=\"line\"></span><br><span class=\"line\">要坚持做的事</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 每天登陆Leetcode，刷三个算法，看社区</span><br><span class=\"line\"><span class=\"bullet\">2.</span> 每天登陆stackoverflow，做到可以回答别人问题和自己提问题</span><br><span class=\"line\"></span><br><span class=\"line\">资源搜索网站</span><br><span class=\"line\"><span class=\"bullet\">1.</span> 57fx(https://www.57fx.com/)</span><br><span class=\"line\"><span class=\"bullet\">2.</span> ip<span class=\"emphasis\">_lookup(https://www.ipaddress.com/ip-lookup/)</span></span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"20180722\"><a href=\"#20180722\" class=\"headerlink\" title=\"20180722\"></a>20180722</h3><ul>\n<li><a href=\"https://www.jianshu.com/p/2e52f1fae9ff\">浏览的网站：为什么你应该用Markdown写作？</a></li>\n<li>下载了免费的markdown的编辑软件macdown，确实很好用</li>\n<li><a href=\"https://www.jianshu.com/p/b03a8d7b1719\">Markdown 语法整理大集合2017</a></li>\n<li><a href=\"https://www.appinn.com/markdown/#html\">Markdown 语法说明</a></li>\n<li><a href=\"https://www.jianshu.com/p/e68fba58f75c\">利用 GitHub Pages 快速搭建个人博客</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">日期</th>\n<th align=\"left\">浏览的网站</th>\n<th align=\"left\">做的事</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">20180722</td>\n<td align=\"left\">为什么你应该用Markdown写作？(<a href=\"https://www.jianshu.com/p/2e52f1fae9ff\">https://www.jianshu.com/p/2e52f1fae9ff</a>)</td>\n<td align=\"left\">下载了免费的markdown的编辑软件macdown，确实很好用</td>\n</tr>\n<tr>\n<td align=\"center\">20180723</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"center\">20180724</td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n"},{"title":"准备学习的东西","date":"2018-07-30T12:59:15.000Z","reward":true,"toc":true,"_content":"\n# 下半年准备学习的东西（一）\n\n## 线程基础、线程之间的共享和协助\n### 基础概念\n```\n* CPU核心数、线程数\n* CPU时间片轮转机制\n* 什么是进城和线程\n* 什么是并行和并发\n* 高并发编程的意义、好处和注意事项\n```\n\n\n### Java线程基础\n\n<!--more-->\n\n#### 启动和终止线程\n```\n* 三种启动线程的方式\n* 理解中断\n* 如何安全的终止线程\n```\n#### 线程再认识\n```\n* 线程常用方法\n* 线程的状态\n* Demon线程\n```\n\n#### 线程见的共享\n```\n* syschronized\n    * 对象锁\n    * 类锁\n* volatile\n* ThreadLocal\n```\n\n#### 线程间协作\n```\n* 等待和通知机制\n    * Wait Notify NotifyAll\n    * 等待和通知的标准范式\n    * notify和notifyAll应该用谁\n* join方法\n* 调用yield()、sleep()、wait()、notify()等方法对锁有何影响\n```\n\n## 线程的并发工具类\n\n> Fork/Join\n> \n>> 什么是分而治之\n>> \n>> 工作密取\n>> \n>> 使用的标准范式\n>\n> CountDownLatch作用、应用场景和实践\n> \n> CyclicBarrier作用、应用场景和实践\n> \n> CountDownLatch和CyclicBarrier辨析\n> \n> Semaphore作用、应用场景和实践\n> \n> Exchange作用、应用场景和实践\n> \n> Callable、Future和FutureTask\n\n## 原子操作CAS\n\n### 原子操作类\n\n#### CAS的原理\n#### CAS的问题\n```\n    ABA问题\n    开销\n    只能保证一个共享变量的原子操作\n```\n\n#### 原子操作类的使用\n```\n\t基本类型\n\t数组\n\t引用\n\t带版本戳\n```\n\n## 显式锁和AQS\n\n### 显式锁\n\n* Lock接口、核心方法和使用\n* Lock接口和synchronized的比较\n* ReentranLock\n    * 可重入锁\n    * 锁的公平和非公平\n* ReentranReadWriteLock\n    * ReadWriteLock接口\n    * 使用场景\n* Condition接口\n    * 用处\n    * 用Lock和Condition实现等待通知\n\n\n### 了解LockSupport\n\n### AbstractQueuedSynchronizer\n\n* 什么是AQS？学习它的必要\n* AQS使用方式和其中的设计模式\n* 了解其中的方法\n* 实现一个自己的独占锁\n* 深入源码\n\t\n\t```\n    1. AQS中的数据结构\n    2. 节点在同步队列中的增加和移出\n    3. 独占式同步状态获取和释放\n    4. 共享式同步状态获取和释放\n    5. Condition分析\n    \t等待队列\n    \tawait方法\n    \tsignal方法\n    ```\n* 了解ReentranLock的实现\n> 锁的可重入\n> \n> 公平和非公平锁\n\n\n* 了解ReentranReadWriteLock的实现\n\n## 并发容器\n\n### ConcurrentHashMap\n* 使用\n* 实现\n    * 基本思想\n    * 预备知识\n    \t* Hash\n    \t* 位运算\n    * jdk1.7\n    \t* 构造方法\n    \t* 如何定位\n    \t* get方法\n    \t* put方法\n    \t* 扩容\n    * jdk1.8\n    \t* 构造方法\n    \t* 如何定位\n    \t* get方法\n    \t* put方法\n    \t* 扩容\n\n\n### 其他并发容器\n* ConcurrentSkipListMap等\n\t* 了解什么是SkipList\n* ConcurrentLinkedQueue\n* 写时复制容器\n\n### 阻塞队列\n* 概念\n* 生产者消费者模式\n* 常用方法\n* 常用阻塞队列辨析\n\t* ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列\n\t* LinkedBlockingQueue:一个由链表结构组成的有界阻塞队列\n\t* PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列\n\t* DelayQueue: 一个使用优先级队列实现的无界阻塞队列\n\t* SynchronousQueue:一个不存储元素的阻塞队列\n\t* LinkedTransferQueue:一个由链表结构组成的无界阻塞队列\n\t* LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列\n* 延时队列实战\n* 阻塞队列实现原理\n\n\n## 线程池\n\n### 什么是线程池？为什么要用线程池\n\n### 实现一个我们自己的线程池\n\n### JDK中的线程池\n* 线程池的创建\n* 提交任务\n* 关闭线程池\n\n### 线程池的工作机制\n\n### 合理配置线程池\n### 系统为我们预定义的线程池\n* 含义\n* 使用场景\n\n>> FixedThreadPool\n>> \n>> SingleThreadExecutor\n>> \n>> CachedThreadPool\n>> \n>> WorkStealingPool\n\n* ScheduledThreadPoolExecutor\n\t* 含义\n\t* 使用场景\n\t* 内部方法辨析\n\n### Executor框架\n### CompletionService\n* 优点\n* 缺点\n\n## 并发安全\n### 类的线程安全\n### 如何做到类的线程安全\n* 无状态\n* 让类不可变\n* .....\n\n### 线程不安全引发的问题\n* 死锁\n\n```\n\t原因\n\t表现\n\t检测和解决\n```\n* 活锁\n* 多线程程序性能和思考\n\n```\n\t影响性能的因素\n\t减少锁的竞争\n```\n\n### 线程安全的单例模式\n* 如何让双重检查锁定安全\n* 懒汉式\n* 饿汉式\n\n## JMM和底层实现原理\n### 现代计算机物理上的内存模型\n* 概念\n* 带的问题\n\n### Java内存模型（JMM）\n* JVM对java内存模型的实现\n* 带来的问题\n* 重排序\n\t* 类型\n\t* 依赖性\n\t* as-if-serial\n\t* 重排序带来的问题\n\t* 内存屏障\n\t* 临界区\n* Happens-Before\n\t* 定义\n\t* 规则\n* volatile的内存语义\n\t* 概念和深入理解\n\t* 内存语义的实现\n\t\t* 重排序规则\n\t\t* 内存屏障插入策略\n* 锁的内存语义\n* final的内存语义\n* volatile的实现原理\n* synchronized的实现原理\n\n\n    ","source":"_posts/准备学习的东西.md","raw":"---\ntitle: 准备学习的东西\ndate: 2018-07-30 20:59:15\ntags: \n - 学习\n - java\nreward: true\ntoc: true\n---\n\n# 下半年准备学习的东西（一）\n\n## 线程基础、线程之间的共享和协助\n### 基础概念\n```\n* CPU核心数、线程数\n* CPU时间片轮转机制\n* 什么是进城和线程\n* 什么是并行和并发\n* 高并发编程的意义、好处和注意事项\n```\n\n\n### Java线程基础\n\n<!--more-->\n\n#### 启动和终止线程\n```\n* 三种启动线程的方式\n* 理解中断\n* 如何安全的终止线程\n```\n#### 线程再认识\n```\n* 线程常用方法\n* 线程的状态\n* Demon线程\n```\n\n#### 线程见的共享\n```\n* syschronized\n    * 对象锁\n    * 类锁\n* volatile\n* ThreadLocal\n```\n\n#### 线程间协作\n```\n* 等待和通知机制\n    * Wait Notify NotifyAll\n    * 等待和通知的标准范式\n    * notify和notifyAll应该用谁\n* join方法\n* 调用yield()、sleep()、wait()、notify()等方法对锁有何影响\n```\n\n## 线程的并发工具类\n\n> Fork/Join\n> \n>> 什么是分而治之\n>> \n>> 工作密取\n>> \n>> 使用的标准范式\n>\n> CountDownLatch作用、应用场景和实践\n> \n> CyclicBarrier作用、应用场景和实践\n> \n> CountDownLatch和CyclicBarrier辨析\n> \n> Semaphore作用、应用场景和实践\n> \n> Exchange作用、应用场景和实践\n> \n> Callable、Future和FutureTask\n\n## 原子操作CAS\n\n### 原子操作类\n\n#### CAS的原理\n#### CAS的问题\n```\n    ABA问题\n    开销\n    只能保证一个共享变量的原子操作\n```\n\n#### 原子操作类的使用\n```\n\t基本类型\n\t数组\n\t引用\n\t带版本戳\n```\n\n## 显式锁和AQS\n\n### 显式锁\n\n* Lock接口、核心方法和使用\n* Lock接口和synchronized的比较\n* ReentranLock\n    * 可重入锁\n    * 锁的公平和非公平\n* ReentranReadWriteLock\n    * ReadWriteLock接口\n    * 使用场景\n* Condition接口\n    * 用处\n    * 用Lock和Condition实现等待通知\n\n\n### 了解LockSupport\n\n### AbstractQueuedSynchronizer\n\n* 什么是AQS？学习它的必要\n* AQS使用方式和其中的设计模式\n* 了解其中的方法\n* 实现一个自己的独占锁\n* 深入源码\n\t\n\t```\n    1. AQS中的数据结构\n    2. 节点在同步队列中的增加和移出\n    3. 独占式同步状态获取和释放\n    4. 共享式同步状态获取和释放\n    5. Condition分析\n    \t等待队列\n    \tawait方法\n    \tsignal方法\n    ```\n* 了解ReentranLock的实现\n> 锁的可重入\n> \n> 公平和非公平锁\n\n\n* 了解ReentranReadWriteLock的实现\n\n## 并发容器\n\n### ConcurrentHashMap\n* 使用\n* 实现\n    * 基本思想\n    * 预备知识\n    \t* Hash\n    \t* 位运算\n    * jdk1.7\n    \t* 构造方法\n    \t* 如何定位\n    \t* get方法\n    \t* put方法\n    \t* 扩容\n    * jdk1.8\n    \t* 构造方法\n    \t* 如何定位\n    \t* get方法\n    \t* put方法\n    \t* 扩容\n\n\n### 其他并发容器\n* ConcurrentSkipListMap等\n\t* 了解什么是SkipList\n* ConcurrentLinkedQueue\n* 写时复制容器\n\n### 阻塞队列\n* 概念\n* 生产者消费者模式\n* 常用方法\n* 常用阻塞队列辨析\n\t* ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列\n\t* LinkedBlockingQueue:一个由链表结构组成的有界阻塞队列\n\t* PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列\n\t* DelayQueue: 一个使用优先级队列实现的无界阻塞队列\n\t* SynchronousQueue:一个不存储元素的阻塞队列\n\t* LinkedTransferQueue:一个由链表结构组成的无界阻塞队列\n\t* LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列\n* 延时队列实战\n* 阻塞队列实现原理\n\n\n## 线程池\n\n### 什么是线程池？为什么要用线程池\n\n### 实现一个我们自己的线程池\n\n### JDK中的线程池\n* 线程池的创建\n* 提交任务\n* 关闭线程池\n\n### 线程池的工作机制\n\n### 合理配置线程池\n### 系统为我们预定义的线程池\n* 含义\n* 使用场景\n\n>> FixedThreadPool\n>> \n>> SingleThreadExecutor\n>> \n>> CachedThreadPool\n>> \n>> WorkStealingPool\n\n* ScheduledThreadPoolExecutor\n\t* 含义\n\t* 使用场景\n\t* 内部方法辨析\n\n### Executor框架\n### CompletionService\n* 优点\n* 缺点\n\n## 并发安全\n### 类的线程安全\n### 如何做到类的线程安全\n* 无状态\n* 让类不可变\n* .....\n\n### 线程不安全引发的问题\n* 死锁\n\n```\n\t原因\n\t表现\n\t检测和解决\n```\n* 活锁\n* 多线程程序性能和思考\n\n```\n\t影响性能的因素\n\t减少锁的竞争\n```\n\n### 线程安全的单例模式\n* 如何让双重检查锁定安全\n* 懒汉式\n* 饿汉式\n\n## JMM和底层实现原理\n### 现代计算机物理上的内存模型\n* 概念\n* 带的问题\n\n### Java内存模型（JMM）\n* JVM对java内存模型的实现\n* 带来的问题\n* 重排序\n\t* 类型\n\t* 依赖性\n\t* as-if-serial\n\t* 重排序带来的问题\n\t* 内存屏障\n\t* 临界区\n* Happens-Before\n\t* 定义\n\t* 规则\n* volatile的内存语义\n\t* 概念和深入理解\n\t* 内存语义的实现\n\t\t* 重排序规则\n\t\t* 内存屏障插入策略\n* 锁的内存语义\n* final的内存语义\n* volatile的实现原理\n* synchronized的实现原理\n\n\n    ","slug":"准备学习的东西","published":1,"updated":"2018-07-31T15:50:12.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptis000sy42jhwei0weg","content":"<h1 id=\"下半年准备学习的东西（一）\"><a href=\"#下半年准备学习的东西（一）\" class=\"headerlink\" title=\"下半年准备学习的东西（一）\"></a>下半年准备学习的东西（一）</h1><h2 id=\"线程基础、线程之间的共享和协助\"><a href=\"#线程基础、线程之间的共享和协助\" class=\"headerlink\" title=\"线程基础、线程之间的共享和协助\"></a>线程基础、线程之间的共享和协助</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* CPU核心数、线程数</span><br><span class=\"line\">* CPU时间片轮转机制</span><br><span class=\"line\">* 什么是进城和线程</span><br><span class=\"line\">* 什么是并行和并发</span><br><span class=\"line\">* 高并发编程的意义、好处和注意事项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Java线程基础\"><a href=\"#Java线程基础\" class=\"headerlink\" title=\"Java线程基础\"></a>Java线程基础</h3><span id=\"more\"></span>\n\n<h4 id=\"启动和终止线程\"><a href=\"#启动和终止线程\" class=\"headerlink\" title=\"启动和终止线程\"></a>启动和终止线程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 三种启动线程的方式</span><br><span class=\"line\">* 理解中断</span><br><span class=\"line\">* 如何安全的终止线程</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程再认识\"><a href=\"#线程再认识\" class=\"headerlink\" title=\"线程再认识\"></a>线程再认识</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 线程常用方法</span><br><span class=\"line\">* 线程的状态</span><br><span class=\"line\">* Demon线程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程见的共享\"><a href=\"#线程见的共享\" class=\"headerlink\" title=\"线程见的共享\"></a>线程见的共享</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* syschronized</span><br><span class=\"line\">    * 对象锁</span><br><span class=\"line\">    * 类锁</span><br><span class=\"line\">* volatile</span><br><span class=\"line\">* ThreadLocal</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程间协作\"><a href=\"#线程间协作\" class=\"headerlink\" title=\"线程间协作\"></a>线程间协作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 等待和通知机制</span><br><span class=\"line\">    * Wait Notify NotifyAll</span><br><span class=\"line\">    * 等待和通知的标准范式</span><br><span class=\"line\">    * notify和notifyAll应该用谁</span><br><span class=\"line\">* join方法</span><br><span class=\"line\">* 调用yield()、sleep()、wait()、notify()等方法对锁有何影响</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程的并发工具类\"><a href=\"#线程的并发工具类\" class=\"headerlink\" title=\"线程的并发工具类\"></a>线程的并发工具类</h2><blockquote>\n<p>Fork&#x2F;Join</p>\n<blockquote>\n<p>什么是分而治之</p>\n<p>工作密取</p>\n<p>使用的标准范式</p>\n</blockquote>\n<p>CountDownLatch作用、应用场景和实践</p>\n<p>CyclicBarrier作用、应用场景和实践</p>\n<p>CountDownLatch和CyclicBarrier辨析</p>\n<p>Semaphore作用、应用场景和实践</p>\n<p>Exchange作用、应用场景和实践</p>\n<p>Callable、Future和FutureTask</p>\n</blockquote>\n<h2 id=\"原子操作CAS\"><a href=\"#原子操作CAS\" class=\"headerlink\" title=\"原子操作CAS\"></a>原子操作CAS</h2><h3 id=\"原子操作类\"><a href=\"#原子操作类\" class=\"headerlink\" title=\"原子操作类\"></a>原子操作类</h3><h4 id=\"CAS的原理\"><a href=\"#CAS的原理\" class=\"headerlink\" title=\"CAS的原理\"></a>CAS的原理</h4><h4 id=\"CAS的问题\"><a href=\"#CAS的问题\" class=\"headerlink\" title=\"CAS的问题\"></a>CAS的问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABA问题</span><br><span class=\"line\">开销</span><br><span class=\"line\">只能保证一个共享变量的原子操作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原子操作类的使用\"><a href=\"#原子操作类的使用\" class=\"headerlink\" title=\"原子操作类的使用\"></a>原子操作类的使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型</span><br><span class=\"line\">数组</span><br><span class=\"line\">引用</span><br><span class=\"line\">带版本戳</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显式锁和AQS\"><a href=\"#显式锁和AQS\" class=\"headerlink\" title=\"显式锁和AQS\"></a>显式锁和AQS</h2><h3 id=\"显式锁\"><a href=\"#显式锁\" class=\"headerlink\" title=\"显式锁\"></a>显式锁</h3><ul>\n<li>Lock接口、核心方法和使用</li>\n<li>Lock接口和synchronized的比较</li>\n<li>ReentranLock<ul>\n<li>可重入锁</li>\n<li>锁的公平和非公平</li>\n</ul>\n</li>\n<li>ReentranReadWriteLock<ul>\n<li>ReadWriteLock接口</li>\n<li>使用场景</li>\n</ul>\n</li>\n<li>Condition接口<ul>\n<li>用处</li>\n<li>用Lock和Condition实现等待通知</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"了解LockSupport\"><a href=\"#了解LockSupport\" class=\"headerlink\" title=\"了解LockSupport\"></a>了解LockSupport</h3><h3 id=\"AbstractQueuedSynchronizer\"><a href=\"#AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"AbstractQueuedSynchronizer\"></a>AbstractQueuedSynchronizer</h3><ul>\n<li><p>什么是AQS？学习它的必要</p>\n</li>\n<li><p>AQS使用方式和其中的设计模式</p>\n</li>\n<li><p>了解其中的方法</p>\n</li>\n<li><p>实现一个自己的独占锁</p>\n</li>\n<li><p>深入源码</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. AQS中的数据结构</span><br><span class=\"line\">2. 节点在同步队列中的增加和移出</span><br><span class=\"line\">3. 独占式同步状态获取和释放</span><br><span class=\"line\">4. 共享式同步状态获取和释放</span><br><span class=\"line\">5. Condition分析</span><br><span class=\"line\">\t等待队列</span><br><span class=\"line\">\tawait方法</span><br><span class=\"line\">\tsignal方法</span><br></pre></td></tr></table></figure></li>\n<li><p>了解ReentranLock的实现</p>\n<blockquote>\n<p>锁的可重入</p>\n<p>公平和非公平锁</p>\n</blockquote>\n</li>\n<li><p>了解ReentranReadWriteLock的实现</p>\n</li>\n</ul>\n<h2 id=\"并发容器\"><a href=\"#并发容器\" class=\"headerlink\" title=\"并发容器\"></a>并发容器</h2><h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><ul>\n<li>使用</li>\n<li>实现<ul>\n<li>基本思想</li>\n<li>预备知识<ul>\n<li>Hash</li>\n<li>位运算</li>\n</ul>\n</li>\n<li>jdk1.7<ul>\n<li>构造方法</li>\n<li>如何定位</li>\n<li>get方法</li>\n<li>put方法</li>\n<li>扩容</li>\n</ul>\n</li>\n<li>jdk1.8<ul>\n<li>构造方法</li>\n<li>如何定位</li>\n<li>get方法</li>\n<li>put方法</li>\n<li>扩容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他并发容器\"><a href=\"#其他并发容器\" class=\"headerlink\" title=\"其他并发容器\"></a>其他并发容器</h3><ul>\n<li>ConcurrentSkipListMap等<ul>\n<li>了解什么是SkipList</li>\n</ul>\n</li>\n<li>ConcurrentLinkedQueue</li>\n<li>写时复制容器</li>\n</ul>\n<h3 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><ul>\n<li>概念</li>\n<li>生产者消费者模式</li>\n<li>常用方法</li>\n<li>常用阻塞队列辨析<ul>\n<li>ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列</li>\n<li>LinkedBlockingQueue:一个由链表结构组成的有界阻塞队列</li>\n<li>PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列</li>\n<li>DelayQueue: 一个使用优先级队列实现的无界阻塞队列</li>\n<li>SynchronousQueue:一个不存储元素的阻塞队列</li>\n<li>LinkedTransferQueue:一个由链表结构组成的无界阻塞队列</li>\n<li>LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n<li>延时队列实战</li>\n<li>阻塞队列实现原理</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><h3 id=\"什么是线程池？为什么要用线程池\"><a href=\"#什么是线程池？为什么要用线程池\" class=\"headerlink\" title=\"什么是线程池？为什么要用线程池\"></a>什么是线程池？为什么要用线程池</h3><h3 id=\"实现一个我们自己的线程池\"><a href=\"#实现一个我们自己的线程池\" class=\"headerlink\" title=\"实现一个我们自己的线程池\"></a>实现一个我们自己的线程池</h3><h3 id=\"JDK中的线程池\"><a href=\"#JDK中的线程池\" class=\"headerlink\" title=\"JDK中的线程池\"></a>JDK中的线程池</h3><ul>\n<li>线程池的创建</li>\n<li>提交任务</li>\n<li>关闭线程池</li>\n</ul>\n<h3 id=\"线程池的工作机制\"><a href=\"#线程池的工作机制\" class=\"headerlink\" title=\"线程池的工作机制\"></a>线程池的工作机制</h3><h3 id=\"合理配置线程池\"><a href=\"#合理配置线程池\" class=\"headerlink\" title=\"合理配置线程池\"></a>合理配置线程池</h3><h3 id=\"系统为我们预定义的线程池\"><a href=\"#系统为我们预定义的线程池\" class=\"headerlink\" title=\"系统为我们预定义的线程池\"></a>系统为我们预定义的线程池</h3><ul>\n<li>含义</li>\n<li>使用场景</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>FixedThreadPool</p>\n<p>SingleThreadExecutor</p>\n<p>CachedThreadPool</p>\n<p>WorkStealingPool</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>ScheduledThreadPoolExecutor<ul>\n<li>含义</li>\n<li>使用场景</li>\n<li>内部方法辨析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Executor框架\"><a href=\"#Executor框架\" class=\"headerlink\" title=\"Executor框架\"></a>Executor框架</h3><h3 id=\"CompletionService\"><a href=\"#CompletionService\" class=\"headerlink\" title=\"CompletionService\"></a>CompletionService</h3><ul>\n<li>优点</li>\n<li>缺点</li>\n</ul>\n<h2 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h2><h3 id=\"类的线程安全\"><a href=\"#类的线程安全\" class=\"headerlink\" title=\"类的线程安全\"></a>类的线程安全</h3><h3 id=\"如何做到类的线程安全\"><a href=\"#如何做到类的线程安全\" class=\"headerlink\" title=\"如何做到类的线程安全\"></a>如何做到类的线程安全</h3><ul>\n<li>无状态</li>\n<li>让类不可变</li>\n<li>…..</li>\n</ul>\n<h3 id=\"线程不安全引发的问题\"><a href=\"#线程不安全引发的问题\" class=\"headerlink\" title=\"线程不安全引发的问题\"></a>线程不安全引发的问题</h3><ul>\n<li>死锁</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因</span><br><span class=\"line\">表现</span><br><span class=\"line\">检测和解决</span><br></pre></td></tr></table></figure>\n<ul>\n<li>活锁</li>\n<li>多线程程序性能和思考</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">影响性能的因素</span><br><span class=\"line\">减少锁的竞争</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程安全的单例模式\"><a href=\"#线程安全的单例模式\" class=\"headerlink\" title=\"线程安全的单例模式\"></a>线程安全的单例模式</h3><ul>\n<li>如何让双重检查锁定安全</li>\n<li>懒汉式</li>\n<li>饿汉式</li>\n</ul>\n<h2 id=\"JMM和底层实现原理\"><a href=\"#JMM和底层实现原理\" class=\"headerlink\" title=\"JMM和底层实现原理\"></a>JMM和底层实现原理</h2><h3 id=\"现代计算机物理上的内存模型\"><a href=\"#现代计算机物理上的内存模型\" class=\"headerlink\" title=\"现代计算机物理上的内存模型\"></a>现代计算机物理上的内存模型</h3><ul>\n<li>概念</li>\n<li>带的问题</li>\n</ul>\n<h3 id=\"Java内存模型（JMM）\"><a href=\"#Java内存模型（JMM）\" class=\"headerlink\" title=\"Java内存模型（JMM）\"></a>Java内存模型（JMM）</h3><ul>\n<li>JVM对java内存模型的实现</li>\n<li>带来的问题</li>\n<li>重排序<ul>\n<li>类型</li>\n<li>依赖性</li>\n<li>as-if-serial</li>\n<li>重排序带来的问题</li>\n<li>内存屏障</li>\n<li>临界区</li>\n</ul>\n</li>\n<li>Happens-Before<ul>\n<li>定义</li>\n<li>规则</li>\n</ul>\n</li>\n<li>volatile的内存语义<ul>\n<li>概念和深入理解</li>\n<li>内存语义的实现<ul>\n<li>重排序规则</li>\n<li>内存屏障插入策略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>锁的内存语义</li>\n<li>final的内存语义</li>\n<li>volatile的实现原理</li>\n<li>synchronized的实现原理</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"下半年准备学习的东西（一）\"><a href=\"#下半年准备学习的东西（一）\" class=\"headerlink\" title=\"下半年准备学习的东西（一）\"></a>下半年准备学习的东西（一）</h1><h2 id=\"线程基础、线程之间的共享和协助\"><a href=\"#线程基础、线程之间的共享和协助\" class=\"headerlink\" title=\"线程基础、线程之间的共享和协助\"></a>线程基础、线程之间的共享和协助</h2><h3 id=\"基础概念\"><a href=\"#基础概念\" class=\"headerlink\" title=\"基础概念\"></a>基础概念</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* CPU核心数、线程数</span><br><span class=\"line\">* CPU时间片轮转机制</span><br><span class=\"line\">* 什么是进城和线程</span><br><span class=\"line\">* 什么是并行和并发</span><br><span class=\"line\">* 高并发编程的意义、好处和注意事项</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"Java线程基础\"><a href=\"#Java线程基础\" class=\"headerlink\" title=\"Java线程基础\"></a>Java线程基础</h3>","more":"<h4 id=\"启动和终止线程\"><a href=\"#启动和终止线程\" class=\"headerlink\" title=\"启动和终止线程\"></a>启动和终止线程</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 三种启动线程的方式</span><br><span class=\"line\">* 理解中断</span><br><span class=\"line\">* 如何安全的终止线程</span><br></pre></td></tr></table></figure>\n<h4 id=\"线程再认识\"><a href=\"#线程再认识\" class=\"headerlink\" title=\"线程再认识\"></a>线程再认识</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 线程常用方法</span><br><span class=\"line\">* 线程的状态</span><br><span class=\"line\">* Demon线程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程见的共享\"><a href=\"#线程见的共享\" class=\"headerlink\" title=\"线程见的共享\"></a>线程见的共享</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* syschronized</span><br><span class=\"line\">    * 对象锁</span><br><span class=\"line\">    * 类锁</span><br><span class=\"line\">* volatile</span><br><span class=\"line\">* ThreadLocal</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"线程间协作\"><a href=\"#线程间协作\" class=\"headerlink\" title=\"线程间协作\"></a>线程间协作</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* 等待和通知机制</span><br><span class=\"line\">    * Wait Notify NotifyAll</span><br><span class=\"line\">    * 等待和通知的标准范式</span><br><span class=\"line\">    * notify和notifyAll应该用谁</span><br><span class=\"line\">* join方法</span><br><span class=\"line\">* 调用yield()、sleep()、wait()、notify()等方法对锁有何影响</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程的并发工具类\"><a href=\"#线程的并发工具类\" class=\"headerlink\" title=\"线程的并发工具类\"></a>线程的并发工具类</h2><blockquote>\n<p>Fork&#x2F;Join</p>\n<blockquote>\n<p>什么是分而治之</p>\n<p>工作密取</p>\n<p>使用的标准范式</p>\n</blockquote>\n<p>CountDownLatch作用、应用场景和实践</p>\n<p>CyclicBarrier作用、应用场景和实践</p>\n<p>CountDownLatch和CyclicBarrier辨析</p>\n<p>Semaphore作用、应用场景和实践</p>\n<p>Exchange作用、应用场景和实践</p>\n<p>Callable、Future和FutureTask</p>\n</blockquote>\n<h2 id=\"原子操作CAS\"><a href=\"#原子操作CAS\" class=\"headerlink\" title=\"原子操作CAS\"></a>原子操作CAS</h2><h3 id=\"原子操作类\"><a href=\"#原子操作类\" class=\"headerlink\" title=\"原子操作类\"></a>原子操作类</h3><h4 id=\"CAS的原理\"><a href=\"#CAS的原理\" class=\"headerlink\" title=\"CAS的原理\"></a>CAS的原理</h4><h4 id=\"CAS的问题\"><a href=\"#CAS的问题\" class=\"headerlink\" title=\"CAS的问题\"></a>CAS的问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABA问题</span><br><span class=\"line\">开销</span><br><span class=\"line\">只能保证一个共享变量的原子操作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原子操作类的使用\"><a href=\"#原子操作类的使用\" class=\"headerlink\" title=\"原子操作类的使用\"></a>原子操作类的使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基本类型</span><br><span class=\"line\">数组</span><br><span class=\"line\">引用</span><br><span class=\"line\">带版本戳</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"显式锁和AQS\"><a href=\"#显式锁和AQS\" class=\"headerlink\" title=\"显式锁和AQS\"></a>显式锁和AQS</h2><h3 id=\"显式锁\"><a href=\"#显式锁\" class=\"headerlink\" title=\"显式锁\"></a>显式锁</h3><ul>\n<li>Lock接口、核心方法和使用</li>\n<li>Lock接口和synchronized的比较</li>\n<li>ReentranLock<ul>\n<li>可重入锁</li>\n<li>锁的公平和非公平</li>\n</ul>\n</li>\n<li>ReentranReadWriteLock<ul>\n<li>ReadWriteLock接口</li>\n<li>使用场景</li>\n</ul>\n</li>\n<li>Condition接口<ul>\n<li>用处</li>\n<li>用Lock和Condition实现等待通知</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"了解LockSupport\"><a href=\"#了解LockSupport\" class=\"headerlink\" title=\"了解LockSupport\"></a>了解LockSupport</h3><h3 id=\"AbstractQueuedSynchronizer\"><a href=\"#AbstractQueuedSynchronizer\" class=\"headerlink\" title=\"AbstractQueuedSynchronizer\"></a>AbstractQueuedSynchronizer</h3><ul>\n<li><p>什么是AQS？学习它的必要</p>\n</li>\n<li><p>AQS使用方式和其中的设计模式</p>\n</li>\n<li><p>了解其中的方法</p>\n</li>\n<li><p>实现一个自己的独占锁</p>\n</li>\n<li><p>深入源码</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. AQS中的数据结构</span><br><span class=\"line\">2. 节点在同步队列中的增加和移出</span><br><span class=\"line\">3. 独占式同步状态获取和释放</span><br><span class=\"line\">4. 共享式同步状态获取和释放</span><br><span class=\"line\">5. Condition分析</span><br><span class=\"line\">\t等待队列</span><br><span class=\"line\">\tawait方法</span><br><span class=\"line\">\tsignal方法</span><br></pre></td></tr></table></figure></li>\n<li><p>了解ReentranLock的实现</p>\n<blockquote>\n<p>锁的可重入</p>\n<p>公平和非公平锁</p>\n</blockquote>\n</li>\n<li><p>了解ReentranReadWriteLock的实现</p>\n</li>\n</ul>\n<h2 id=\"并发容器\"><a href=\"#并发容器\" class=\"headerlink\" title=\"并发容器\"></a>并发容器</h2><h3 id=\"ConcurrentHashMap\"><a href=\"#ConcurrentHashMap\" class=\"headerlink\" title=\"ConcurrentHashMap\"></a>ConcurrentHashMap</h3><ul>\n<li>使用</li>\n<li>实现<ul>\n<li>基本思想</li>\n<li>预备知识<ul>\n<li>Hash</li>\n<li>位运算</li>\n</ul>\n</li>\n<li>jdk1.7<ul>\n<li>构造方法</li>\n<li>如何定位</li>\n<li>get方法</li>\n<li>put方法</li>\n<li>扩容</li>\n</ul>\n</li>\n<li>jdk1.8<ul>\n<li>构造方法</li>\n<li>如何定位</li>\n<li>get方法</li>\n<li>put方法</li>\n<li>扩容</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他并发容器\"><a href=\"#其他并发容器\" class=\"headerlink\" title=\"其他并发容器\"></a>其他并发容器</h3><ul>\n<li>ConcurrentSkipListMap等<ul>\n<li>了解什么是SkipList</li>\n</ul>\n</li>\n<li>ConcurrentLinkedQueue</li>\n<li>写时复制容器</li>\n</ul>\n<h3 id=\"阻塞队列\"><a href=\"#阻塞队列\" class=\"headerlink\" title=\"阻塞队列\"></a>阻塞队列</h3><ul>\n<li>概念</li>\n<li>生产者消费者模式</li>\n<li>常用方法</li>\n<li>常用阻塞队列辨析<ul>\n<li>ArrayBlockingQueue:一个由数组结构组成的有界阻塞队列</li>\n<li>LinkedBlockingQueue:一个由链表结构组成的有界阻塞队列</li>\n<li>PriorityBlockingQueue:一个支持优先级排序的无界阻塞队列</li>\n<li>DelayQueue: 一个使用优先级队列实现的无界阻塞队列</li>\n<li>SynchronousQueue:一个不存储元素的阻塞队列</li>\n<li>LinkedTransferQueue:一个由链表结构组成的无界阻塞队列</li>\n<li>LinkedBlockingDeque:一个由链表结构组成的双向阻塞队列</li>\n</ul>\n</li>\n<li>延时队列实战</li>\n<li>阻塞队列实现原理</li>\n</ul>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><h3 id=\"什么是线程池？为什么要用线程池\"><a href=\"#什么是线程池？为什么要用线程池\" class=\"headerlink\" title=\"什么是线程池？为什么要用线程池\"></a>什么是线程池？为什么要用线程池</h3><h3 id=\"实现一个我们自己的线程池\"><a href=\"#实现一个我们自己的线程池\" class=\"headerlink\" title=\"实现一个我们自己的线程池\"></a>实现一个我们自己的线程池</h3><h3 id=\"JDK中的线程池\"><a href=\"#JDK中的线程池\" class=\"headerlink\" title=\"JDK中的线程池\"></a>JDK中的线程池</h3><ul>\n<li>线程池的创建</li>\n<li>提交任务</li>\n<li>关闭线程池</li>\n</ul>\n<h3 id=\"线程池的工作机制\"><a href=\"#线程池的工作机制\" class=\"headerlink\" title=\"线程池的工作机制\"></a>线程池的工作机制</h3><h3 id=\"合理配置线程池\"><a href=\"#合理配置线程池\" class=\"headerlink\" title=\"合理配置线程池\"></a>合理配置线程池</h3><h3 id=\"系统为我们预定义的线程池\"><a href=\"#系统为我们预定义的线程池\" class=\"headerlink\" title=\"系统为我们预定义的线程池\"></a>系统为我们预定义的线程池</h3><ul>\n<li>含义</li>\n<li>使用场景</li>\n</ul>\n<blockquote>\n<blockquote>\n<p>FixedThreadPool</p>\n<p>SingleThreadExecutor</p>\n<p>CachedThreadPool</p>\n<p>WorkStealingPool</p>\n</blockquote>\n</blockquote>\n<ul>\n<li>ScheduledThreadPoolExecutor<ul>\n<li>含义</li>\n<li>使用场景</li>\n<li>内部方法辨析</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Executor框架\"><a href=\"#Executor框架\" class=\"headerlink\" title=\"Executor框架\"></a>Executor框架</h3><h3 id=\"CompletionService\"><a href=\"#CompletionService\" class=\"headerlink\" title=\"CompletionService\"></a>CompletionService</h3><ul>\n<li>优点</li>\n<li>缺点</li>\n</ul>\n<h2 id=\"并发安全\"><a href=\"#并发安全\" class=\"headerlink\" title=\"并发安全\"></a>并发安全</h2><h3 id=\"类的线程安全\"><a href=\"#类的线程安全\" class=\"headerlink\" title=\"类的线程安全\"></a>类的线程安全</h3><h3 id=\"如何做到类的线程安全\"><a href=\"#如何做到类的线程安全\" class=\"headerlink\" title=\"如何做到类的线程安全\"></a>如何做到类的线程安全</h3><ul>\n<li>无状态</li>\n<li>让类不可变</li>\n<li>…..</li>\n</ul>\n<h3 id=\"线程不安全引发的问题\"><a href=\"#线程不安全引发的问题\" class=\"headerlink\" title=\"线程不安全引发的问题\"></a>线程不安全引发的问题</h3><ul>\n<li>死锁</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">原因</span><br><span class=\"line\">表现</span><br><span class=\"line\">检测和解决</span><br></pre></td></tr></table></figure>\n<ul>\n<li>活锁</li>\n<li>多线程程序性能和思考</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">影响性能的因素</span><br><span class=\"line\">减少锁的竞争</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程安全的单例模式\"><a href=\"#线程安全的单例模式\" class=\"headerlink\" title=\"线程安全的单例模式\"></a>线程安全的单例模式</h3><ul>\n<li>如何让双重检查锁定安全</li>\n<li>懒汉式</li>\n<li>饿汉式</li>\n</ul>\n<h2 id=\"JMM和底层实现原理\"><a href=\"#JMM和底层实现原理\" class=\"headerlink\" title=\"JMM和底层实现原理\"></a>JMM和底层实现原理</h2><h3 id=\"现代计算机物理上的内存模型\"><a href=\"#现代计算机物理上的内存模型\" class=\"headerlink\" title=\"现代计算机物理上的内存模型\"></a>现代计算机物理上的内存模型</h3><ul>\n<li>概念</li>\n<li>带的问题</li>\n</ul>\n<h3 id=\"Java内存模型（JMM）\"><a href=\"#Java内存模型（JMM）\" class=\"headerlink\" title=\"Java内存模型（JMM）\"></a>Java内存模型（JMM）</h3><ul>\n<li>JVM对java内存模型的实现</li>\n<li>带来的问题</li>\n<li>重排序<ul>\n<li>类型</li>\n<li>依赖性</li>\n<li>as-if-serial</li>\n<li>重排序带来的问题</li>\n<li>内存屏障</li>\n<li>临界区</li>\n</ul>\n</li>\n<li>Happens-Before<ul>\n<li>定义</li>\n<li>规则</li>\n</ul>\n</li>\n<li>volatile的内存语义<ul>\n<li>概念和深入理解</li>\n<li>内存语义的实现<ul>\n<li>重排序规则</li>\n<li>内存屏障插入策略</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>锁的内存语义</li>\n<li>final的内存语义</li>\n<li>volatile的实现原理</li>\n<li>synchronized的实现原理</li>\n</ul>"},{"title":"准备学习的东西（二）","date":"2018-07-31T15:28:41.000Z","reward":true,"toc":true,"_content":"\n# 下半年准备学习的东西（二）\n\n## 性能调优专题\n\n### 性能优化如何理解\n\n* 如何衡量性能标准\n* 性能优化是什么\n* 性能优化后的效果\n\n<!--more-->\n\n### JVM调优\n\n* JVM 内存管理机制\n\t* 内存区域与内存溢出异常\n\t\t* 运行时数据区域\n\t\t\t* 程序计数器\n\t\t\t* 虚拟机栈\n\t\t\t* 本地方法栈\n\t\t* 虚拟机对象\n\t* 垃圾收集器与内存分配策略\n\t\t* 垃圾回收算法与基础\n\t\t* 串行收集器\n\t\t* 并行收集器\n\t\t* 内存分配与回收策略\n\t* 虚拟机性能监控与故障处理工具\n* JVM 执行子系统\n\t* 类文件结构\n\t* 类加载机制\n\t* 字节码执行引擎\n* 程序编译与代码优化\n\t* 编译期优化\n\t* 运行期优化\n* 实战调优案例与解决方法\n\n\n### JAVA程序性能优化\n\n* 优雅的创建对象\n* 注意对象的通用方法\n* 类的设计陷阱\n* 泛型需要注意的问题\n* Java方法的那些坑\n* 程序设计的通用规则\n\n### Tomcat\n\n* Tomcat线程模型分析\n* Tomcat生产环境配置\n* Tomcat运行机制及框架\n* Tomcat针对并发优化\n* Tomcat针对内存优化\n\n\n### Mysql\n* 探析BTree机制\n* 执行计划深入分析\n* Mysql索引优化详解\n* 慢查询分析与SQL优化\n\n## 常用框架源码分析\n\n### Spring概述\n\n* Spring Framework体系结构\n* 环境搭建\n\n### Spring容器\n* 容器基本实现和组成\n* 装配Bean的方式\n\t* xml\n\t* 注解\n\t* JavaConfig\n* BeanFactory源码分析\n* BeanDefinition源码分析\n* Bean生命周期\n* 依赖实现\n\n### Spring AOP\n* 面向切面的基础\n\t* AOP的基石动态代理\n\t* Spring对AOP的支持\n\t\t* 注解\n\t\t* xml\n* AOP源码分析\n\t* ProxyFactory源码解析\n\t* AopProxy源码解析\n\t\t* JdkDynamicAopProxy\n\t\t* Cglib2AopProxy\n\t* 拦截与植入\n\t\t* advice源码分析\n\t\t* Interceptor源码分析\n* Transaction事物分析\n\t* 事务的基础\n\t* Spring对事务的支持\n\t* 源码分析\n* Spring Cache框架源码分析\n\n### Spring MVC\n* Spring MVC的使用和流程解析\n* Spring MVC组成\n\n\t```\n\t* DispatchServlet\n\t* HandlerMapping映射器\n\t* HandlerAdapter执行适配器\n\t* ViewResolver视图\n\t* View解析器\n\t* HandlerExceptionResolver异常捕捉器\n\t```\n\n* Spring MVC的高级技术\n\t* 使用multipart实现上传和下载\n\t* 异常的统一封装\n\t* 数据格式转化器\n\t* 拦截器的使用\n\n### Spring 5 新特性\n* 容器增强\n* 函数式编程\n* webFlux模块介绍\n* kotlin介绍\n* Testing改进\n* 兼容性问题\n\n### Mybatis\n* Mybatis组成\n\t* 动态sql\n\t* Config配置\n\t* Mapper配置\n* 核心源码分析\n\t* Configuration源码解析\n\t* SqlSessionFactory源码解析\n\t* SqlSession源码解析\n\t* SqlSessionManager源码解析\n* 熟悉mybatis框架\n\n## 互联网分布式架构专题\n### 分布式架构思维\n* 大型互联网架构演进过程\n* 架构师应该具备的分布式知识\n* 主流分布式架构设计详解\n\n### 架构开发基础\n* 并发编程\n\n\t```\n\t1. 线程基础\n\t2. 原子操作类和CAS\n\t3. Lock、Condition和显示锁\n\t4. AbstractQueuedSynchronizer分析\n\t5. 并发工具类和并发容器\n\t6. 线程池和Executor框架\n\t7. 实现原理和Java内存模型\n\t8. 线程安全\n\t9. 并发项目实战\n\t```\n\t\n* 高性能NIO框架\n>Netty应用\n>\n>Netty源码解读\n\n### 架构核心服务层技术\n* 服务的前世今生\n* 深入理解通讯协议\n\t* TCP\n\t* UDP\n\t* HTTP\n* 基于分布式思想下的RPC解决方案\n* Dubbo全解析\n\t* Dubbo简介及初入门\n\t* Dubbo管理中心及监控系统安装部署\n\t* 领域驱动之如何正确划分Dubbo分布式服务\n\t* Dubbo负载均衡机制探析\n\t* 如何完成Dubbo服务只订阅及只注册模式\n\t* 架构师必备技术之如何设计Dubbo服务接口\n\t* Dubbo设计原理及源码分析\n\t* Dubbo容错机制及高扩展性分析\n\t* Dubbo服务与Docker虚拟化技术集成实战\n\n### 架构关键基础设施\n#### 分布式环境指挥官Zookeeper\n* Zookeeper基础\n\t* Zookeeper的入门\n\t\t* 数据节点\n\t\t\t* 会话\n\t\t\t* 节点属性\n\t\t\t* 节点类型\n\t\t\t* 版本\n\t\t* 监听器机制\n\t\t* 安全权限\n\t\t* 单机部署\n\t\t* Zookeeper的命令\n\t* Zookeeper开发基础\n\t\t* 原生客户端\n\t\t* zkclient\n\t\t* curotor\n* Zookeeper进阶\n\t* Zookeeper集群\n\t\t* Zookeeper集群部署安装\n\t\t* 客户端连接zk集群及管理\n\t* Zookeeper的注意事项\n* Zookeeper的使用举例\n\t* 配置中心\n\t* 分布式锁\n\t* 集群选举\n\t* 命名服务\n\n#### 分布式消息通讯异步与MQ\n* ActiveMq\n\t* 消息中间件(ActiveMq、RabbitMQ、Kafka)简介及对比\n\t* 软件下载、安装及部署\n\t* P2P、PUB\\SUB模型详解\n\t* 消息确认及重发机制\n\t* 企业级高可用集群部署方案\n\t* ActiveMq基于Spring完成分布式消息队列实战\n* RabbitMq\n\t* RabbitMQ及高可用集群部署\n\t* 深入学习RabbitMQ消息分发机制及主要消息分发\n\t* RabbitMQ消息路由机制分析\n\t* RabbitMQ消息确认机制分析\n\t* RabbitMQ机遇Spring完成分布式消息队列实战\n\t* 安装配置\n\t* 集群化与消息队列\n* kafka\n\t* 基于Zookeeper搭建高可用集群实战\n\t* Kafka消息处理过程解析\n\t* 基于Java语言实现Kafka生产者与消费者实战\n\t* Kafka副本机制及选举原理窥探\n\t* 使用kafka实现日志实时上报统计分析实战\n\n\n#### 分布式缓存NoSql\n* Redis\n\t* Redis初入门及介绍\n\t* Redis主从模式\n\t\t* 一主一从\n\t\t* 一主多从\n\t\t* 树形主从\n\t* Redis常用命令及应用场景\n\t* Redis客户端\n\t\t* Jedis\n\t\t* Jedispool\n\t\t* JedisCluster\n\t\t* JedisCluster+SpringMVC整合\n\t\t* 手写Jedis实战\n\t* Redis持久化\n\t\t* RDB\n\t\t* AOF\n\t\t* 数据恢复与转移实战\n\t* 哨兵\n\t\t* 选举原理\n\t\t* 主从下线\n\t\t* 客观下线\n\t\t* Java与哨兵如何工作\n\t\t* 动手搭建Spring与Redis哨兵模式集成实战\n\t* 高可用集群\n\t\t* 槽的介绍\n\t\t* 键槽关系\n\t\t* 分布式存储\n\t\t* 重定向\n\t\t* 手把手搭建Redis高可用集群\n\t\t* 动态扩容、缩减集群节点实战 \n\t* 原子性\n\t\t* Lua语言结合开发\n\t\t* 弱事务体现\n\t\t* multi、watch、discard、exec\n\t\t* Redis与Lua模拟抢红包实战\n\t* 应用场景代码并发与设计分析实战\n\t\t* 分布式锁实战\n\t\t* Session共享实战\n* memcached\n\t* 概述\n\t\t* MemeCached特点\n\t\t* 与Redis区别\n\t\t* 安装配置\n\t* 并发基础\n\t\t* 客户端命令\n\t\t* Java客户端\n\t\t* 集群搭建\n* 缓存并发专题\n\t* 缓存雪崩\n\t* 缓存粒度控制\n\t* 缓存击穿\n\t* 缓存热点Key重建优化\n\t* 缓存同步\n\t* Spring-Cache开发\n* MongoDB\n\t* mongodb入门\n\t\t* NoSql与sql使用场景分析\n\t\t* 基础概念\n\t\t\t* 数据库\n\t\t\t* 集合\n\t\t\t* 索引\n\t\t\t* 文档\n\t* mongodb进阶\n\t\t* 常用命令\n\t\t* 快速入门\n\t\t* mongodb客户端驱动\n\t\t* 增删改查与聚合\n\t\t* 安全控制\n\t* mongodb高级知识\n\t\t* 存储引擎\n\t\t* 索引\n\t\t* 高可用\n\t* 最佳实践与注意事项\n\n\n#### 数据存储\n* Mysql\n\t* Mysql主从复制、读写分离高可用方案实战\n\t* Mysql+Keepalived实现双主高可用方案实战\n\t* Mysql实现分库分表高性能解决方案实战\n* Mycat\n\t* Mycat简介及用途\n\t* 基于Mycat实现Mysql读写分离实战\n\t* 基于Mycat实现数据库切分实战\n\t* 全局表、ER表、分片机制分析\n\n#### 高并发分流技术Nginx\n* Nginx模块简介\n* Nginx工作原理及安装配置\n* Nginx常用命令管理及升级\n* Nginx配置分拣精讲\n* 实战线上Nginx多站点配置\n* Nginx配置优化及深入剖析\n* Nginx Rewrite规则剖析\n* Nginx日志分析及脚本编写\n* Nginx日志切割案例讲解\n* Nginx防盗链案例配置\n* Nginx日常运维及故障解决\n* Nginx构件安全HTTPS架构实践\n* 企业实战Nginx＋Tomcat动静分离架构实战\n* Nginx＋Keepalived集群架构实战\n* Nginx＋Keepalived双主架构案例实战\n\n#### 分布式文件存储fastdfs\n* 文件存储\n* 文件同步\n* 文件查阅\n* 分布式部署实战\n\n### 分布式常见场景解决方案\n* 分布式主键声称方案\n* Session跨域共享实战\n* 分布式事务解决方案实战\n* 分布式锁解决方案实战\n* 分布式单点登录实战SSO\n* 分布式调度任务系统\n* 分布式配置中心\n\n\n## 团队协作开发专题\n* Git\n\t* Git基本工作原理\n\t\t* 与svn对比\n\t\t* 基本运作流程\n\t* Git常用操作及问题处理\n\t\t* 工程初始化及克隆\n\t\t* 文件提交\n\t\t* 分支与常用标签应用\n\t\t* 远程仓库管理\n\t\t* 合并与冲突解决\n\t\t* 架构师职责：Git Flow必备技能，规范团队Git操作\n\t\t* 架构师踩过的坑\n* Maven\n\t* Maven 重要指令(clean、complie、test、package、install、deploy)\n\t* 私服－Nexus\n\t\t1. Maven 重要指令(clean、complie、test、package、install、deploy)\n\t\t2. Nexus服务搭建\n\t\t3. Nexus仓库管理\n\t\t4. Nexus使用、上传、配置\n\t\n\t* Maven流行插件实践、手写自己的插件\n\t* 架构师如何理解Scope\\Lifecycle\\Phase\\Goal\n* Jenkins\n\t* Jenkins服务部署\n\t* Jenkins持续集成\n* Sonar\n\t* 静态代码检查，代码更健壮\n\t* 代码走查\n\n## 微服务专题\n### SpringBoot\n* SpringBoot与微服务的区别与联系\n* 快速构建SpringBoot工程\n* SpringBoot核心组建start、 actuator等解析\n* 快速集成Mybatis实战\n* 快速集成Dubbo及案例实战\n* 快速集成redis及案例实战\n* 构建Swagger插件实现API管理及接口测试体系\n \n### SpringCloud\n* Ribbon客户端负载均衡原理与算法详解，与服务器端敷在均衡的区别\n* Feign声明式服务调用方式实现\n* Hystrix服务熔断及服务障级实战\n* Eureka注册中心构件级源码分析\n* Config配置服务中心与svn、git快速集成\n* Sleuth调用链路跟踪\n* BUS消息总线技术\n* Stream消息驱动的微服务\n\n### Docker虚拟化技术\n* Docker介绍、安装与使用\n* Docker组成\n\t* 镜像\n\t* 容器\n\t* 私有仓库\n* Docker Compose部署脚本\n* Docker Service服务编排\n* Docker Redis 分布式集群部署\n* Docker File 构建\n* 通过Maven插件打包Docker镜像\n* Docker部署级运行应用程序\n* Kubernetes编配\n* 基于Docker构建Mysql集群实战\n* 高可用SpringCloud微服务与Docker集成实现动态扩容实战","source":"_posts/准备学习的东西（二）.md","raw":"---\ntitle: 准备学习的东西（二）\ndate: 2018-07-31 23:28:41\ntags: \n - 学习\n - java\nreward: true\ntoc: true\n---\n\n# 下半年准备学习的东西（二）\n\n## 性能调优专题\n\n### 性能优化如何理解\n\n* 如何衡量性能标准\n* 性能优化是什么\n* 性能优化后的效果\n\n<!--more-->\n\n### JVM调优\n\n* JVM 内存管理机制\n\t* 内存区域与内存溢出异常\n\t\t* 运行时数据区域\n\t\t\t* 程序计数器\n\t\t\t* 虚拟机栈\n\t\t\t* 本地方法栈\n\t\t* 虚拟机对象\n\t* 垃圾收集器与内存分配策略\n\t\t* 垃圾回收算法与基础\n\t\t* 串行收集器\n\t\t* 并行收集器\n\t\t* 内存分配与回收策略\n\t* 虚拟机性能监控与故障处理工具\n* JVM 执行子系统\n\t* 类文件结构\n\t* 类加载机制\n\t* 字节码执行引擎\n* 程序编译与代码优化\n\t* 编译期优化\n\t* 运行期优化\n* 实战调优案例与解决方法\n\n\n### JAVA程序性能优化\n\n* 优雅的创建对象\n* 注意对象的通用方法\n* 类的设计陷阱\n* 泛型需要注意的问题\n* Java方法的那些坑\n* 程序设计的通用规则\n\n### Tomcat\n\n* Tomcat线程模型分析\n* Tomcat生产环境配置\n* Tomcat运行机制及框架\n* Tomcat针对并发优化\n* Tomcat针对内存优化\n\n\n### Mysql\n* 探析BTree机制\n* 执行计划深入分析\n* Mysql索引优化详解\n* 慢查询分析与SQL优化\n\n## 常用框架源码分析\n\n### Spring概述\n\n* Spring Framework体系结构\n* 环境搭建\n\n### Spring容器\n* 容器基本实现和组成\n* 装配Bean的方式\n\t* xml\n\t* 注解\n\t* JavaConfig\n* BeanFactory源码分析\n* BeanDefinition源码分析\n* Bean生命周期\n* 依赖实现\n\n### Spring AOP\n* 面向切面的基础\n\t* AOP的基石动态代理\n\t* Spring对AOP的支持\n\t\t* 注解\n\t\t* xml\n* AOP源码分析\n\t* ProxyFactory源码解析\n\t* AopProxy源码解析\n\t\t* JdkDynamicAopProxy\n\t\t* Cglib2AopProxy\n\t* 拦截与植入\n\t\t* advice源码分析\n\t\t* Interceptor源码分析\n* Transaction事物分析\n\t* 事务的基础\n\t* Spring对事务的支持\n\t* 源码分析\n* Spring Cache框架源码分析\n\n### Spring MVC\n* Spring MVC的使用和流程解析\n* Spring MVC组成\n\n\t```\n\t* DispatchServlet\n\t* HandlerMapping映射器\n\t* HandlerAdapter执行适配器\n\t* ViewResolver视图\n\t* View解析器\n\t* HandlerExceptionResolver异常捕捉器\n\t```\n\n* Spring MVC的高级技术\n\t* 使用multipart实现上传和下载\n\t* 异常的统一封装\n\t* 数据格式转化器\n\t* 拦截器的使用\n\n### Spring 5 新特性\n* 容器增强\n* 函数式编程\n* webFlux模块介绍\n* kotlin介绍\n* Testing改进\n* 兼容性问题\n\n### Mybatis\n* Mybatis组成\n\t* 动态sql\n\t* Config配置\n\t* Mapper配置\n* 核心源码分析\n\t* Configuration源码解析\n\t* SqlSessionFactory源码解析\n\t* SqlSession源码解析\n\t* SqlSessionManager源码解析\n* 熟悉mybatis框架\n\n## 互联网分布式架构专题\n### 分布式架构思维\n* 大型互联网架构演进过程\n* 架构师应该具备的分布式知识\n* 主流分布式架构设计详解\n\n### 架构开发基础\n* 并发编程\n\n\t```\n\t1. 线程基础\n\t2. 原子操作类和CAS\n\t3. Lock、Condition和显示锁\n\t4. AbstractQueuedSynchronizer分析\n\t5. 并发工具类和并发容器\n\t6. 线程池和Executor框架\n\t7. 实现原理和Java内存模型\n\t8. 线程安全\n\t9. 并发项目实战\n\t```\n\t\n* 高性能NIO框架\n>Netty应用\n>\n>Netty源码解读\n\n### 架构核心服务层技术\n* 服务的前世今生\n* 深入理解通讯协议\n\t* TCP\n\t* UDP\n\t* HTTP\n* 基于分布式思想下的RPC解决方案\n* Dubbo全解析\n\t* Dubbo简介及初入门\n\t* Dubbo管理中心及监控系统安装部署\n\t* 领域驱动之如何正确划分Dubbo分布式服务\n\t* Dubbo负载均衡机制探析\n\t* 如何完成Dubbo服务只订阅及只注册模式\n\t* 架构师必备技术之如何设计Dubbo服务接口\n\t* Dubbo设计原理及源码分析\n\t* Dubbo容错机制及高扩展性分析\n\t* Dubbo服务与Docker虚拟化技术集成实战\n\n### 架构关键基础设施\n#### 分布式环境指挥官Zookeeper\n* Zookeeper基础\n\t* Zookeeper的入门\n\t\t* 数据节点\n\t\t\t* 会话\n\t\t\t* 节点属性\n\t\t\t* 节点类型\n\t\t\t* 版本\n\t\t* 监听器机制\n\t\t* 安全权限\n\t\t* 单机部署\n\t\t* Zookeeper的命令\n\t* Zookeeper开发基础\n\t\t* 原生客户端\n\t\t* zkclient\n\t\t* curotor\n* Zookeeper进阶\n\t* Zookeeper集群\n\t\t* Zookeeper集群部署安装\n\t\t* 客户端连接zk集群及管理\n\t* Zookeeper的注意事项\n* Zookeeper的使用举例\n\t* 配置中心\n\t* 分布式锁\n\t* 集群选举\n\t* 命名服务\n\n#### 分布式消息通讯异步与MQ\n* ActiveMq\n\t* 消息中间件(ActiveMq、RabbitMQ、Kafka)简介及对比\n\t* 软件下载、安装及部署\n\t* P2P、PUB\\SUB模型详解\n\t* 消息确认及重发机制\n\t* 企业级高可用集群部署方案\n\t* ActiveMq基于Spring完成分布式消息队列实战\n* RabbitMq\n\t* RabbitMQ及高可用集群部署\n\t* 深入学习RabbitMQ消息分发机制及主要消息分发\n\t* RabbitMQ消息路由机制分析\n\t* RabbitMQ消息确认机制分析\n\t* RabbitMQ机遇Spring完成分布式消息队列实战\n\t* 安装配置\n\t* 集群化与消息队列\n* kafka\n\t* 基于Zookeeper搭建高可用集群实战\n\t* Kafka消息处理过程解析\n\t* 基于Java语言实现Kafka生产者与消费者实战\n\t* Kafka副本机制及选举原理窥探\n\t* 使用kafka实现日志实时上报统计分析实战\n\n\n#### 分布式缓存NoSql\n* Redis\n\t* Redis初入门及介绍\n\t* Redis主从模式\n\t\t* 一主一从\n\t\t* 一主多从\n\t\t* 树形主从\n\t* Redis常用命令及应用场景\n\t* Redis客户端\n\t\t* Jedis\n\t\t* Jedispool\n\t\t* JedisCluster\n\t\t* JedisCluster+SpringMVC整合\n\t\t* 手写Jedis实战\n\t* Redis持久化\n\t\t* RDB\n\t\t* AOF\n\t\t* 数据恢复与转移实战\n\t* 哨兵\n\t\t* 选举原理\n\t\t* 主从下线\n\t\t* 客观下线\n\t\t* Java与哨兵如何工作\n\t\t* 动手搭建Spring与Redis哨兵模式集成实战\n\t* 高可用集群\n\t\t* 槽的介绍\n\t\t* 键槽关系\n\t\t* 分布式存储\n\t\t* 重定向\n\t\t* 手把手搭建Redis高可用集群\n\t\t* 动态扩容、缩减集群节点实战 \n\t* 原子性\n\t\t* Lua语言结合开发\n\t\t* 弱事务体现\n\t\t* multi、watch、discard、exec\n\t\t* Redis与Lua模拟抢红包实战\n\t* 应用场景代码并发与设计分析实战\n\t\t* 分布式锁实战\n\t\t* Session共享实战\n* memcached\n\t* 概述\n\t\t* MemeCached特点\n\t\t* 与Redis区别\n\t\t* 安装配置\n\t* 并发基础\n\t\t* 客户端命令\n\t\t* Java客户端\n\t\t* 集群搭建\n* 缓存并发专题\n\t* 缓存雪崩\n\t* 缓存粒度控制\n\t* 缓存击穿\n\t* 缓存热点Key重建优化\n\t* 缓存同步\n\t* Spring-Cache开发\n* MongoDB\n\t* mongodb入门\n\t\t* NoSql与sql使用场景分析\n\t\t* 基础概念\n\t\t\t* 数据库\n\t\t\t* 集合\n\t\t\t* 索引\n\t\t\t* 文档\n\t* mongodb进阶\n\t\t* 常用命令\n\t\t* 快速入门\n\t\t* mongodb客户端驱动\n\t\t* 增删改查与聚合\n\t\t* 安全控制\n\t* mongodb高级知识\n\t\t* 存储引擎\n\t\t* 索引\n\t\t* 高可用\n\t* 最佳实践与注意事项\n\n\n#### 数据存储\n* Mysql\n\t* Mysql主从复制、读写分离高可用方案实战\n\t* Mysql+Keepalived实现双主高可用方案实战\n\t* Mysql实现分库分表高性能解决方案实战\n* Mycat\n\t* Mycat简介及用途\n\t* 基于Mycat实现Mysql读写分离实战\n\t* 基于Mycat实现数据库切分实战\n\t* 全局表、ER表、分片机制分析\n\n#### 高并发分流技术Nginx\n* Nginx模块简介\n* Nginx工作原理及安装配置\n* Nginx常用命令管理及升级\n* Nginx配置分拣精讲\n* 实战线上Nginx多站点配置\n* Nginx配置优化及深入剖析\n* Nginx Rewrite规则剖析\n* Nginx日志分析及脚本编写\n* Nginx日志切割案例讲解\n* Nginx防盗链案例配置\n* Nginx日常运维及故障解决\n* Nginx构件安全HTTPS架构实践\n* 企业实战Nginx＋Tomcat动静分离架构实战\n* Nginx＋Keepalived集群架构实战\n* Nginx＋Keepalived双主架构案例实战\n\n#### 分布式文件存储fastdfs\n* 文件存储\n* 文件同步\n* 文件查阅\n* 分布式部署实战\n\n### 分布式常见场景解决方案\n* 分布式主键声称方案\n* Session跨域共享实战\n* 分布式事务解决方案实战\n* 分布式锁解决方案实战\n* 分布式单点登录实战SSO\n* 分布式调度任务系统\n* 分布式配置中心\n\n\n## 团队协作开发专题\n* Git\n\t* Git基本工作原理\n\t\t* 与svn对比\n\t\t* 基本运作流程\n\t* Git常用操作及问题处理\n\t\t* 工程初始化及克隆\n\t\t* 文件提交\n\t\t* 分支与常用标签应用\n\t\t* 远程仓库管理\n\t\t* 合并与冲突解决\n\t\t* 架构师职责：Git Flow必备技能，规范团队Git操作\n\t\t* 架构师踩过的坑\n* Maven\n\t* Maven 重要指令(clean、complie、test、package、install、deploy)\n\t* 私服－Nexus\n\t\t1. Maven 重要指令(clean、complie、test、package、install、deploy)\n\t\t2. Nexus服务搭建\n\t\t3. Nexus仓库管理\n\t\t4. Nexus使用、上传、配置\n\t\n\t* Maven流行插件实践、手写自己的插件\n\t* 架构师如何理解Scope\\Lifecycle\\Phase\\Goal\n* Jenkins\n\t* Jenkins服务部署\n\t* Jenkins持续集成\n* Sonar\n\t* 静态代码检查，代码更健壮\n\t* 代码走查\n\n## 微服务专题\n### SpringBoot\n* SpringBoot与微服务的区别与联系\n* 快速构建SpringBoot工程\n* SpringBoot核心组建start、 actuator等解析\n* 快速集成Mybatis实战\n* 快速集成Dubbo及案例实战\n* 快速集成redis及案例实战\n* 构建Swagger插件实现API管理及接口测试体系\n \n### SpringCloud\n* Ribbon客户端负载均衡原理与算法详解，与服务器端敷在均衡的区别\n* Feign声明式服务调用方式实现\n* Hystrix服务熔断及服务障级实战\n* Eureka注册中心构件级源码分析\n* Config配置服务中心与svn、git快速集成\n* Sleuth调用链路跟踪\n* BUS消息总线技术\n* Stream消息驱动的微服务\n\n### Docker虚拟化技术\n* Docker介绍、安装与使用\n* Docker组成\n\t* 镜像\n\t* 容器\n\t* 私有仓库\n* Docker Compose部署脚本\n* Docker Service服务编排\n* Docker Redis 分布式集群部署\n* Docker File 构建\n* 通过Maven插件打包Docker镜像\n* Docker部署级运行应用程序\n* Kubernetes编配\n* 基于Docker构建Mysql集群实战\n* 高可用SpringCloud微服务与Docker集成实现动态扩容实战","slug":"准备学习的东西（二）","published":1,"updated":"2018-07-31T15:49:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptiv000vy42j3mmea7m6","content":"<h1 id=\"下半年准备学习的东西（二）\"><a href=\"#下半年准备学习的东西（二）\" class=\"headerlink\" title=\"下半年准备学习的东西（二）\"></a>下半年准备学习的东西（二）</h1><h2 id=\"性能调优专题\"><a href=\"#性能调优专题\" class=\"headerlink\" title=\"性能调优专题\"></a>性能调优专题</h2><h3 id=\"性能优化如何理解\"><a href=\"#性能优化如何理解\" class=\"headerlink\" title=\"性能优化如何理解\"></a>性能优化如何理解</h3><ul>\n<li>如何衡量性能标准</li>\n<li>性能优化是什么</li>\n<li>性能优化后的效果</li>\n</ul>\n<span id=\"more\"></span>\n\n<h3 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h3><ul>\n<li>JVM 内存管理机制<ul>\n<li>内存区域与内存溢出异常<ul>\n<li>运行时数据区域<ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n</li>\n<li>虚拟机对象</li>\n</ul>\n</li>\n<li>垃圾收集器与内存分配策略<ul>\n<li>垃圾回收算法与基础</li>\n<li>串行收集器</li>\n<li>并行收集器</li>\n<li>内存分配与回收策略</li>\n</ul>\n</li>\n<li>虚拟机性能监控与故障处理工具</li>\n</ul>\n</li>\n<li>JVM 执行子系统<ul>\n<li>类文件结构</li>\n<li>类加载机制</li>\n<li>字节码执行引擎</li>\n</ul>\n</li>\n<li>程序编译与代码优化<ul>\n<li>编译期优化</li>\n<li>运行期优化</li>\n</ul>\n</li>\n<li>实战调优案例与解决方法</li>\n</ul>\n<h3 id=\"JAVA程序性能优化\"><a href=\"#JAVA程序性能优化\" class=\"headerlink\" title=\"JAVA程序性能优化\"></a>JAVA程序性能优化</h3><ul>\n<li>优雅的创建对象</li>\n<li>注意对象的通用方法</li>\n<li>类的设计陷阱</li>\n<li>泛型需要注意的问题</li>\n<li>Java方法的那些坑</li>\n<li>程序设计的通用规则</li>\n</ul>\n<h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><ul>\n<li>Tomcat线程模型分析</li>\n<li>Tomcat生产环境配置</li>\n<li>Tomcat运行机制及框架</li>\n<li>Tomcat针对并发优化</li>\n<li>Tomcat针对内存优化</li>\n</ul>\n<h3 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h3><ul>\n<li>探析BTree机制</li>\n<li>执行计划深入分析</li>\n<li>Mysql索引优化详解</li>\n<li>慢查询分析与SQL优化</li>\n</ul>\n<h2 id=\"常用框架源码分析\"><a href=\"#常用框架源码分析\" class=\"headerlink\" title=\"常用框架源码分析\"></a>常用框架源码分析</h2><h3 id=\"Spring概述\"><a href=\"#Spring概述\" class=\"headerlink\" title=\"Spring概述\"></a>Spring概述</h3><ul>\n<li>Spring Framework体系结构</li>\n<li>环境搭建</li>\n</ul>\n<h3 id=\"Spring容器\"><a href=\"#Spring容器\" class=\"headerlink\" title=\"Spring容器\"></a>Spring容器</h3><ul>\n<li>容器基本实现和组成</li>\n<li>装配Bean的方式<ul>\n<li>xml</li>\n<li>注解</li>\n<li>JavaConfig</li>\n</ul>\n</li>\n<li>BeanFactory源码分析</li>\n<li>BeanDefinition源码分析</li>\n<li>Bean生命周期</li>\n<li>依赖实现</li>\n</ul>\n<h3 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h3><ul>\n<li>面向切面的基础<ul>\n<li>AOP的基石动态代理</li>\n<li>Spring对AOP的支持<ul>\n<li>注解</li>\n<li>xml</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AOP源码分析<ul>\n<li>ProxyFactory源码解析</li>\n<li>AopProxy源码解析<ul>\n<li>JdkDynamicAopProxy</li>\n<li>Cglib2AopProxy</li>\n</ul>\n</li>\n<li>拦截与植入<ul>\n<li>advice源码分析</li>\n<li>Interceptor源码分析</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Transaction事物分析<ul>\n<li>事务的基础</li>\n<li>Spring对事务的支持</li>\n<li>源码分析</li>\n</ul>\n</li>\n<li>Spring Cache框架源码分析</li>\n</ul>\n<h3 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h3><ul>\n<li><p>Spring MVC的使用和流程解析</p>\n</li>\n<li><p>Spring MVC组成</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DispatchServlet</span><br><span class=\"line\">* HandlerMapping映射器</span><br><span class=\"line\">* HandlerAdapter执行适配器</span><br><span class=\"line\">* ViewResolver视图</span><br><span class=\"line\">* View解析器</span><br><span class=\"line\">* HandlerExceptionResolver异常捕捉器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Spring MVC的高级技术</p>\n<ul>\n<li>使用multipart实现上传和下载</li>\n<li>异常的统一封装</li>\n<li>数据格式转化器</li>\n<li>拦截器的使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Spring-5-新特性\"><a href=\"#Spring-5-新特性\" class=\"headerlink\" title=\"Spring 5 新特性\"></a>Spring 5 新特性</h3><ul>\n<li>容器增强</li>\n<li>函数式编程</li>\n<li>webFlux模块介绍</li>\n<li>kotlin介绍</li>\n<li>Testing改进</li>\n<li>兼容性问题</li>\n</ul>\n<h3 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h3><ul>\n<li>Mybatis组成<ul>\n<li>动态sql</li>\n<li>Config配置</li>\n<li>Mapper配置</li>\n</ul>\n</li>\n<li>核心源码分析<ul>\n<li>Configuration源码解析</li>\n<li>SqlSessionFactory源码解析</li>\n<li>SqlSession源码解析</li>\n<li>SqlSessionManager源码解析</li>\n</ul>\n</li>\n<li>熟悉mybatis框架</li>\n</ul>\n<h2 id=\"互联网分布式架构专题\"><a href=\"#互联网分布式架构专题\" class=\"headerlink\" title=\"互联网分布式架构专题\"></a>互联网分布式架构专题</h2><h3 id=\"分布式架构思维\"><a href=\"#分布式架构思维\" class=\"headerlink\" title=\"分布式架构思维\"></a>分布式架构思维</h3><ul>\n<li>大型互联网架构演进过程</li>\n<li>架构师应该具备的分布式知识</li>\n<li>主流分布式架构设计详解</li>\n</ul>\n<h3 id=\"架构开发基础\"><a href=\"#架构开发基础\" class=\"headerlink\" title=\"架构开发基础\"></a>架构开发基础</h3><ul>\n<li><p>并发编程</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 线程基础</span><br><span class=\"line\">2. 原子操作类和CAS</span><br><span class=\"line\">3. Lock、Condition和显示锁</span><br><span class=\"line\">4. AbstractQueuedSynchronizer分析</span><br><span class=\"line\">5. 并发工具类和并发容器</span><br><span class=\"line\">6. 线程池和Executor框架</span><br><span class=\"line\">7. 实现原理和Java内存模型</span><br><span class=\"line\">8. 线程安全</span><br><span class=\"line\">9. 并发项目实战</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>高性能NIO框架</p>\n<blockquote>\n<p>Netty应用</p>\n<p>Netty源码解读</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"架构核心服务层技术\"><a href=\"#架构核心服务层技术\" class=\"headerlink\" title=\"架构核心服务层技术\"></a>架构核心服务层技术</h3><ul>\n<li>服务的前世今生</li>\n<li>深入理解通讯协议<ul>\n<li>TCP</li>\n<li>UDP</li>\n<li>HTTP</li>\n</ul>\n</li>\n<li>基于分布式思想下的RPC解决方案</li>\n<li>Dubbo全解析<ul>\n<li>Dubbo简介及初入门</li>\n<li>Dubbo管理中心及监控系统安装部署</li>\n<li>领域驱动之如何正确划分Dubbo分布式服务</li>\n<li>Dubbo负载均衡机制探析</li>\n<li>如何完成Dubbo服务只订阅及只注册模式</li>\n<li>架构师必备技术之如何设计Dubbo服务接口</li>\n<li>Dubbo设计原理及源码分析</li>\n<li>Dubbo容错机制及高扩展性分析</li>\n<li>Dubbo服务与Docker虚拟化技术集成实战</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"架构关键基础设施\"><a href=\"#架构关键基础设施\" class=\"headerlink\" title=\"架构关键基础设施\"></a>架构关键基础设施</h3><h4 id=\"分布式环境指挥官Zookeeper\"><a href=\"#分布式环境指挥官Zookeeper\" class=\"headerlink\" title=\"分布式环境指挥官Zookeeper\"></a>分布式环境指挥官Zookeeper</h4><ul>\n<li>Zookeeper基础<ul>\n<li>Zookeeper的入门<ul>\n<li>数据节点<ul>\n<li>会话</li>\n<li>节点属性</li>\n<li>节点类型</li>\n<li>版本</li>\n</ul>\n</li>\n<li>监听器机制</li>\n<li>安全权限</li>\n<li>单机部署</li>\n<li>Zookeeper的命令</li>\n</ul>\n</li>\n<li>Zookeeper开发基础<ul>\n<li>原生客户端</li>\n<li>zkclient</li>\n<li>curotor</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Zookeeper进阶<ul>\n<li>Zookeeper集群<ul>\n<li>Zookeeper集群部署安装</li>\n<li>客户端连接zk集群及管理</li>\n</ul>\n</li>\n<li>Zookeeper的注意事项</li>\n</ul>\n</li>\n<li>Zookeeper的使用举例<ul>\n<li>配置中心</li>\n<li>分布式锁</li>\n<li>集群选举</li>\n<li>命名服务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式消息通讯异步与MQ\"><a href=\"#分布式消息通讯异步与MQ\" class=\"headerlink\" title=\"分布式消息通讯异步与MQ\"></a>分布式消息通讯异步与MQ</h4><ul>\n<li>ActiveMq<ul>\n<li>消息中间件(ActiveMq、RabbitMQ、Kafka)简介及对比</li>\n<li>软件下载、安装及部署</li>\n<li>P2P、PUB\\SUB模型详解</li>\n<li>消息确认及重发机制</li>\n<li>企业级高可用集群部署方案</li>\n<li>ActiveMq基于Spring完成分布式消息队列实战</li>\n</ul>\n</li>\n<li>RabbitMq<ul>\n<li>RabbitMQ及高可用集群部署</li>\n<li>深入学习RabbitMQ消息分发机制及主要消息分发</li>\n<li>RabbitMQ消息路由机制分析</li>\n<li>RabbitMQ消息确认机制分析</li>\n<li>RabbitMQ机遇Spring完成分布式消息队列实战</li>\n<li>安装配置</li>\n<li>集群化与消息队列</li>\n</ul>\n</li>\n<li>kafka<ul>\n<li>基于Zookeeper搭建高可用集群实战</li>\n<li>Kafka消息处理过程解析</li>\n<li>基于Java语言实现Kafka生产者与消费者实战</li>\n<li>Kafka副本机制及选举原理窥探</li>\n<li>使用kafka实现日志实时上报统计分析实战</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式缓存NoSql\"><a href=\"#分布式缓存NoSql\" class=\"headerlink\" title=\"分布式缓存NoSql\"></a>分布式缓存NoSql</h4><ul>\n<li>Redis<ul>\n<li>Redis初入门及介绍</li>\n<li>Redis主从模式<ul>\n<li>一主一从</li>\n<li>一主多从</li>\n<li>树形主从</li>\n</ul>\n</li>\n<li>Redis常用命令及应用场景</li>\n<li>Redis客户端<ul>\n<li>Jedis</li>\n<li>Jedispool</li>\n<li>JedisCluster</li>\n<li>JedisCluster+SpringMVC整合</li>\n<li>手写Jedis实战</li>\n</ul>\n</li>\n<li>Redis持久化<ul>\n<li>RDB</li>\n<li>AOF</li>\n<li>数据恢复与转移实战</li>\n</ul>\n</li>\n<li>哨兵<ul>\n<li>选举原理</li>\n<li>主从下线</li>\n<li>客观下线</li>\n<li>Java与哨兵如何工作</li>\n<li>动手搭建Spring与Redis哨兵模式集成实战</li>\n</ul>\n</li>\n<li>高可用集群<ul>\n<li>槽的介绍</li>\n<li>键槽关系</li>\n<li>分布式存储</li>\n<li>重定向</li>\n<li>手把手搭建Redis高可用集群</li>\n<li>动态扩容、缩减集群节点实战</li>\n</ul>\n</li>\n<li>原子性<ul>\n<li>Lua语言结合开发</li>\n<li>弱事务体现</li>\n<li>multi、watch、discard、exec</li>\n<li>Redis与Lua模拟抢红包实战</li>\n</ul>\n</li>\n<li>应用场景代码并发与设计分析实战<ul>\n<li>分布式锁实战</li>\n<li>Session共享实战</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>memcached<ul>\n<li>概述<ul>\n<li>MemeCached特点</li>\n<li>与Redis区别</li>\n<li>安装配置</li>\n</ul>\n</li>\n<li>并发基础<ul>\n<li>客户端命令</li>\n<li>Java客户端</li>\n<li>集群搭建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>缓存并发专题<ul>\n<li>缓存雪崩</li>\n<li>缓存粒度控制</li>\n<li>缓存击穿</li>\n<li>缓存热点Key重建优化</li>\n<li>缓存同步</li>\n<li>Spring-Cache开发</li>\n</ul>\n</li>\n<li>MongoDB<ul>\n<li>mongodb入门<ul>\n<li>NoSql与sql使用场景分析</li>\n<li>基础概念<ul>\n<li>数据库</li>\n<li>集合</li>\n<li>索引</li>\n<li>文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mongodb进阶<ul>\n<li>常用命令</li>\n<li>快速入门</li>\n<li>mongodb客户端驱动</li>\n<li>增删改查与聚合</li>\n<li>安全控制</li>\n</ul>\n</li>\n<li>mongodb高级知识<ul>\n<li>存储引擎</li>\n<li>索引</li>\n<li>高可用</li>\n</ul>\n</li>\n<li>最佳实践与注意事项</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h4><ul>\n<li>Mysql<ul>\n<li>Mysql主从复制、读写分离高可用方案实战</li>\n<li>Mysql+Keepalived实现双主高可用方案实战</li>\n<li>Mysql实现分库分表高性能解决方案实战</li>\n</ul>\n</li>\n<li>Mycat<ul>\n<li>Mycat简介及用途</li>\n<li>基于Mycat实现Mysql读写分离实战</li>\n<li>基于Mycat实现数据库切分实战</li>\n<li>全局表、ER表、分片机制分析</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"高并发分流技术Nginx\"><a href=\"#高并发分流技术Nginx\" class=\"headerlink\" title=\"高并发分流技术Nginx\"></a>高并发分流技术Nginx</h4><ul>\n<li>Nginx模块简介</li>\n<li>Nginx工作原理及安装配置</li>\n<li>Nginx常用命令管理及升级</li>\n<li>Nginx配置分拣精讲</li>\n<li>实战线上Nginx多站点配置</li>\n<li>Nginx配置优化及深入剖析</li>\n<li>Nginx Rewrite规则剖析</li>\n<li>Nginx日志分析及脚本编写</li>\n<li>Nginx日志切割案例讲解</li>\n<li>Nginx防盗链案例配置</li>\n<li>Nginx日常运维及故障解决</li>\n<li>Nginx构件安全HTTPS架构实践</li>\n<li>企业实战Nginx＋Tomcat动静分离架构实战</li>\n<li>Nginx＋Keepalived集群架构实战</li>\n<li>Nginx＋Keepalived双主架构案例实战</li>\n</ul>\n<h4 id=\"分布式文件存储fastdfs\"><a href=\"#分布式文件存储fastdfs\" class=\"headerlink\" title=\"分布式文件存储fastdfs\"></a>分布式文件存储fastdfs</h4><ul>\n<li>文件存储</li>\n<li>文件同步</li>\n<li>文件查阅</li>\n<li>分布式部署实战</li>\n</ul>\n<h3 id=\"分布式常见场景解决方案\"><a href=\"#分布式常见场景解决方案\" class=\"headerlink\" title=\"分布式常见场景解决方案\"></a>分布式常见场景解决方案</h3><ul>\n<li>分布式主键声称方案</li>\n<li>Session跨域共享实战</li>\n<li>分布式事务解决方案实战</li>\n<li>分布式锁解决方案实战</li>\n<li>分布式单点登录实战SSO</li>\n<li>分布式调度任务系统</li>\n<li>分布式配置中心</li>\n</ul>\n<h2 id=\"团队协作开发专题\"><a href=\"#团队协作开发专题\" class=\"headerlink\" title=\"团队协作开发专题\"></a>团队协作开发专题</h2><ul>\n<li>Git<ul>\n<li>Git基本工作原理<ul>\n<li>与svn对比</li>\n<li>基本运作流程</li>\n</ul>\n</li>\n<li>Git常用操作及问题处理<ul>\n<li>工程初始化及克隆</li>\n<li>文件提交</li>\n<li>分支与常用标签应用</li>\n<li>远程仓库管理</li>\n<li>合并与冲突解决</li>\n<li>架构师职责：Git Flow必备技能，规范团队Git操作</li>\n<li>架构师踩过的坑</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Maven<ul>\n<li><p>Maven 重要指令(clean、complie、test、package、install、deploy)</p>\n</li>\n<li><p>私服－Nexus</p>\n<ol>\n<li>Maven 重要指令(clean、complie、test、package、install、deploy)</li>\n<li>Nexus服务搭建</li>\n<li>Nexus仓库管理</li>\n<li>Nexus使用、上传、配置</li>\n</ol>\n</li>\n<li><p>Maven流行插件实践、手写自己的插件</p>\n</li>\n<li><p>架构师如何理解Scope\\Lifecycle\\Phase\\Goal</p>\n</li>\n</ul>\n</li>\n<li>Jenkins<ul>\n<li>Jenkins服务部署</li>\n<li>Jenkins持续集成</li>\n</ul>\n</li>\n<li>Sonar<ul>\n<li>静态代码检查，代码更健壮</li>\n<li>代码走查</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"微服务专题\"><a href=\"#微服务专题\" class=\"headerlink\" title=\"微服务专题\"></a>微服务专题</h2><h3 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h3><ul>\n<li>SpringBoot与微服务的区别与联系</li>\n<li>快速构建SpringBoot工程</li>\n<li>SpringBoot核心组建start、 actuator等解析</li>\n<li>快速集成Mybatis实战</li>\n<li>快速集成Dubbo及案例实战</li>\n<li>快速集成redis及案例实战</li>\n<li>构建Swagger插件实现API管理及接口测试体系</li>\n</ul>\n<h3 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h3><ul>\n<li>Ribbon客户端负载均衡原理与算法详解，与服务器端敷在均衡的区别</li>\n<li>Feign声明式服务调用方式实现</li>\n<li>Hystrix服务熔断及服务障级实战</li>\n<li>Eureka注册中心构件级源码分析</li>\n<li>Config配置服务中心与svn、git快速集成</li>\n<li>Sleuth调用链路跟踪</li>\n<li>BUS消息总线技术</li>\n<li>Stream消息驱动的微服务</li>\n</ul>\n<h3 id=\"Docker虚拟化技术\"><a href=\"#Docker虚拟化技术\" class=\"headerlink\" title=\"Docker虚拟化技术\"></a>Docker虚拟化技术</h3><ul>\n<li>Docker介绍、安装与使用</li>\n<li>Docker组成<ul>\n<li>镜像</li>\n<li>容器</li>\n<li>私有仓库</li>\n</ul>\n</li>\n<li>Docker Compose部署脚本</li>\n<li>Docker Service服务编排</li>\n<li>Docker Redis 分布式集群部署</li>\n<li>Docker File 构建</li>\n<li>通过Maven插件打包Docker镜像</li>\n<li>Docker部署级运行应用程序</li>\n<li>Kubernetes编配</li>\n<li>基于Docker构建Mysql集群实战</li>\n<li>高可用SpringCloud微服务与Docker集成实现动态扩容实战</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"下半年准备学习的东西（二）\"><a href=\"#下半年准备学习的东西（二）\" class=\"headerlink\" title=\"下半年准备学习的东西（二）\"></a>下半年准备学习的东西（二）</h1><h2 id=\"性能调优专题\"><a href=\"#性能调优专题\" class=\"headerlink\" title=\"性能调优专题\"></a>性能调优专题</h2><h3 id=\"性能优化如何理解\"><a href=\"#性能优化如何理解\" class=\"headerlink\" title=\"性能优化如何理解\"></a>性能优化如何理解</h3><ul>\n<li>如何衡量性能标准</li>\n<li>性能优化是什么</li>\n<li>性能优化后的效果</li>\n</ul>","more":"<h3 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h3><ul>\n<li>JVM 内存管理机制<ul>\n<li>内存区域与内存溢出异常<ul>\n<li>运行时数据区域<ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n</li>\n<li>虚拟机对象</li>\n</ul>\n</li>\n<li>垃圾收集器与内存分配策略<ul>\n<li>垃圾回收算法与基础</li>\n<li>串行收集器</li>\n<li>并行收集器</li>\n<li>内存分配与回收策略</li>\n</ul>\n</li>\n<li>虚拟机性能监控与故障处理工具</li>\n</ul>\n</li>\n<li>JVM 执行子系统<ul>\n<li>类文件结构</li>\n<li>类加载机制</li>\n<li>字节码执行引擎</li>\n</ul>\n</li>\n<li>程序编译与代码优化<ul>\n<li>编译期优化</li>\n<li>运行期优化</li>\n</ul>\n</li>\n<li>实战调优案例与解决方法</li>\n</ul>\n<h3 id=\"JAVA程序性能优化\"><a href=\"#JAVA程序性能优化\" class=\"headerlink\" title=\"JAVA程序性能优化\"></a>JAVA程序性能优化</h3><ul>\n<li>优雅的创建对象</li>\n<li>注意对象的通用方法</li>\n<li>类的设计陷阱</li>\n<li>泛型需要注意的问题</li>\n<li>Java方法的那些坑</li>\n<li>程序设计的通用规则</li>\n</ul>\n<h3 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h3><ul>\n<li>Tomcat线程模型分析</li>\n<li>Tomcat生产环境配置</li>\n<li>Tomcat运行机制及框架</li>\n<li>Tomcat针对并发优化</li>\n<li>Tomcat针对内存优化</li>\n</ul>\n<h3 id=\"Mysql\"><a href=\"#Mysql\" class=\"headerlink\" title=\"Mysql\"></a>Mysql</h3><ul>\n<li>探析BTree机制</li>\n<li>执行计划深入分析</li>\n<li>Mysql索引优化详解</li>\n<li>慢查询分析与SQL优化</li>\n</ul>\n<h2 id=\"常用框架源码分析\"><a href=\"#常用框架源码分析\" class=\"headerlink\" title=\"常用框架源码分析\"></a>常用框架源码分析</h2><h3 id=\"Spring概述\"><a href=\"#Spring概述\" class=\"headerlink\" title=\"Spring概述\"></a>Spring概述</h3><ul>\n<li>Spring Framework体系结构</li>\n<li>环境搭建</li>\n</ul>\n<h3 id=\"Spring容器\"><a href=\"#Spring容器\" class=\"headerlink\" title=\"Spring容器\"></a>Spring容器</h3><ul>\n<li>容器基本实现和组成</li>\n<li>装配Bean的方式<ul>\n<li>xml</li>\n<li>注解</li>\n<li>JavaConfig</li>\n</ul>\n</li>\n<li>BeanFactory源码分析</li>\n<li>BeanDefinition源码分析</li>\n<li>Bean生命周期</li>\n<li>依赖实现</li>\n</ul>\n<h3 id=\"Spring-AOP\"><a href=\"#Spring-AOP\" class=\"headerlink\" title=\"Spring AOP\"></a>Spring AOP</h3><ul>\n<li>面向切面的基础<ul>\n<li>AOP的基石动态代理</li>\n<li>Spring对AOP的支持<ul>\n<li>注解</li>\n<li>xml</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>AOP源码分析<ul>\n<li>ProxyFactory源码解析</li>\n<li>AopProxy源码解析<ul>\n<li>JdkDynamicAopProxy</li>\n<li>Cglib2AopProxy</li>\n</ul>\n</li>\n<li>拦截与植入<ul>\n<li>advice源码分析</li>\n<li>Interceptor源码分析</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Transaction事物分析<ul>\n<li>事务的基础</li>\n<li>Spring对事务的支持</li>\n<li>源码分析</li>\n</ul>\n</li>\n<li>Spring Cache框架源码分析</li>\n</ul>\n<h3 id=\"Spring-MVC\"><a href=\"#Spring-MVC\" class=\"headerlink\" title=\"Spring MVC\"></a>Spring MVC</h3><ul>\n<li><p>Spring MVC的使用和流程解析</p>\n</li>\n<li><p>Spring MVC组成</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* DispatchServlet</span><br><span class=\"line\">* HandlerMapping映射器</span><br><span class=\"line\">* HandlerAdapter执行适配器</span><br><span class=\"line\">* ViewResolver视图</span><br><span class=\"line\">* View解析器</span><br><span class=\"line\">* HandlerExceptionResolver异常捕捉器</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Spring MVC的高级技术</p>\n<ul>\n<li>使用multipart实现上传和下载</li>\n<li>异常的统一封装</li>\n<li>数据格式转化器</li>\n<li>拦截器的使用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Spring-5-新特性\"><a href=\"#Spring-5-新特性\" class=\"headerlink\" title=\"Spring 5 新特性\"></a>Spring 5 新特性</h3><ul>\n<li>容器增强</li>\n<li>函数式编程</li>\n<li>webFlux模块介绍</li>\n<li>kotlin介绍</li>\n<li>Testing改进</li>\n<li>兼容性问题</li>\n</ul>\n<h3 id=\"Mybatis\"><a href=\"#Mybatis\" class=\"headerlink\" title=\"Mybatis\"></a>Mybatis</h3><ul>\n<li>Mybatis组成<ul>\n<li>动态sql</li>\n<li>Config配置</li>\n<li>Mapper配置</li>\n</ul>\n</li>\n<li>核心源码分析<ul>\n<li>Configuration源码解析</li>\n<li>SqlSessionFactory源码解析</li>\n<li>SqlSession源码解析</li>\n<li>SqlSessionManager源码解析</li>\n</ul>\n</li>\n<li>熟悉mybatis框架</li>\n</ul>\n<h2 id=\"互联网分布式架构专题\"><a href=\"#互联网分布式架构专题\" class=\"headerlink\" title=\"互联网分布式架构专题\"></a>互联网分布式架构专题</h2><h3 id=\"分布式架构思维\"><a href=\"#分布式架构思维\" class=\"headerlink\" title=\"分布式架构思维\"></a>分布式架构思维</h3><ul>\n<li>大型互联网架构演进过程</li>\n<li>架构师应该具备的分布式知识</li>\n<li>主流分布式架构设计详解</li>\n</ul>\n<h3 id=\"架构开发基础\"><a href=\"#架构开发基础\" class=\"headerlink\" title=\"架构开发基础\"></a>架构开发基础</h3><ul>\n<li><p>并发编程</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 线程基础</span><br><span class=\"line\">2. 原子操作类和CAS</span><br><span class=\"line\">3. Lock、Condition和显示锁</span><br><span class=\"line\">4. AbstractQueuedSynchronizer分析</span><br><span class=\"line\">5. 并发工具类和并发容器</span><br><span class=\"line\">6. 线程池和Executor框架</span><br><span class=\"line\">7. 实现原理和Java内存模型</span><br><span class=\"line\">8. 线程安全</span><br><span class=\"line\">9. 并发项目实战</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>高性能NIO框架</p>\n<blockquote>\n<p>Netty应用</p>\n<p>Netty源码解读</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"架构核心服务层技术\"><a href=\"#架构核心服务层技术\" class=\"headerlink\" title=\"架构核心服务层技术\"></a>架构核心服务层技术</h3><ul>\n<li>服务的前世今生</li>\n<li>深入理解通讯协议<ul>\n<li>TCP</li>\n<li>UDP</li>\n<li>HTTP</li>\n</ul>\n</li>\n<li>基于分布式思想下的RPC解决方案</li>\n<li>Dubbo全解析<ul>\n<li>Dubbo简介及初入门</li>\n<li>Dubbo管理中心及监控系统安装部署</li>\n<li>领域驱动之如何正确划分Dubbo分布式服务</li>\n<li>Dubbo负载均衡机制探析</li>\n<li>如何完成Dubbo服务只订阅及只注册模式</li>\n<li>架构师必备技术之如何设计Dubbo服务接口</li>\n<li>Dubbo设计原理及源码分析</li>\n<li>Dubbo容错机制及高扩展性分析</li>\n<li>Dubbo服务与Docker虚拟化技术集成实战</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"架构关键基础设施\"><a href=\"#架构关键基础设施\" class=\"headerlink\" title=\"架构关键基础设施\"></a>架构关键基础设施</h3><h4 id=\"分布式环境指挥官Zookeeper\"><a href=\"#分布式环境指挥官Zookeeper\" class=\"headerlink\" title=\"分布式环境指挥官Zookeeper\"></a>分布式环境指挥官Zookeeper</h4><ul>\n<li>Zookeeper基础<ul>\n<li>Zookeeper的入门<ul>\n<li>数据节点<ul>\n<li>会话</li>\n<li>节点属性</li>\n<li>节点类型</li>\n<li>版本</li>\n</ul>\n</li>\n<li>监听器机制</li>\n<li>安全权限</li>\n<li>单机部署</li>\n<li>Zookeeper的命令</li>\n</ul>\n</li>\n<li>Zookeeper开发基础<ul>\n<li>原生客户端</li>\n<li>zkclient</li>\n<li>curotor</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Zookeeper进阶<ul>\n<li>Zookeeper集群<ul>\n<li>Zookeeper集群部署安装</li>\n<li>客户端连接zk集群及管理</li>\n</ul>\n</li>\n<li>Zookeeper的注意事项</li>\n</ul>\n</li>\n<li>Zookeeper的使用举例<ul>\n<li>配置中心</li>\n<li>分布式锁</li>\n<li>集群选举</li>\n<li>命名服务</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式消息通讯异步与MQ\"><a href=\"#分布式消息通讯异步与MQ\" class=\"headerlink\" title=\"分布式消息通讯异步与MQ\"></a>分布式消息通讯异步与MQ</h4><ul>\n<li>ActiveMq<ul>\n<li>消息中间件(ActiveMq、RabbitMQ、Kafka)简介及对比</li>\n<li>软件下载、安装及部署</li>\n<li>P2P、PUB\\SUB模型详解</li>\n<li>消息确认及重发机制</li>\n<li>企业级高可用集群部署方案</li>\n<li>ActiveMq基于Spring完成分布式消息队列实战</li>\n</ul>\n</li>\n<li>RabbitMq<ul>\n<li>RabbitMQ及高可用集群部署</li>\n<li>深入学习RabbitMQ消息分发机制及主要消息分发</li>\n<li>RabbitMQ消息路由机制分析</li>\n<li>RabbitMQ消息确认机制分析</li>\n<li>RabbitMQ机遇Spring完成分布式消息队列实战</li>\n<li>安装配置</li>\n<li>集群化与消息队列</li>\n</ul>\n</li>\n<li>kafka<ul>\n<li>基于Zookeeper搭建高可用集群实战</li>\n<li>Kafka消息处理过程解析</li>\n<li>基于Java语言实现Kafka生产者与消费者实战</li>\n<li>Kafka副本机制及选举原理窥探</li>\n<li>使用kafka实现日志实时上报统计分析实战</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"分布式缓存NoSql\"><a href=\"#分布式缓存NoSql\" class=\"headerlink\" title=\"分布式缓存NoSql\"></a>分布式缓存NoSql</h4><ul>\n<li>Redis<ul>\n<li>Redis初入门及介绍</li>\n<li>Redis主从模式<ul>\n<li>一主一从</li>\n<li>一主多从</li>\n<li>树形主从</li>\n</ul>\n</li>\n<li>Redis常用命令及应用场景</li>\n<li>Redis客户端<ul>\n<li>Jedis</li>\n<li>Jedispool</li>\n<li>JedisCluster</li>\n<li>JedisCluster+SpringMVC整合</li>\n<li>手写Jedis实战</li>\n</ul>\n</li>\n<li>Redis持久化<ul>\n<li>RDB</li>\n<li>AOF</li>\n<li>数据恢复与转移实战</li>\n</ul>\n</li>\n<li>哨兵<ul>\n<li>选举原理</li>\n<li>主从下线</li>\n<li>客观下线</li>\n<li>Java与哨兵如何工作</li>\n<li>动手搭建Spring与Redis哨兵模式集成实战</li>\n</ul>\n</li>\n<li>高可用集群<ul>\n<li>槽的介绍</li>\n<li>键槽关系</li>\n<li>分布式存储</li>\n<li>重定向</li>\n<li>手把手搭建Redis高可用集群</li>\n<li>动态扩容、缩减集群节点实战</li>\n</ul>\n</li>\n<li>原子性<ul>\n<li>Lua语言结合开发</li>\n<li>弱事务体现</li>\n<li>multi、watch、discard、exec</li>\n<li>Redis与Lua模拟抢红包实战</li>\n</ul>\n</li>\n<li>应用场景代码并发与设计分析实战<ul>\n<li>分布式锁实战</li>\n<li>Session共享实战</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>memcached<ul>\n<li>概述<ul>\n<li>MemeCached特点</li>\n<li>与Redis区别</li>\n<li>安装配置</li>\n</ul>\n</li>\n<li>并发基础<ul>\n<li>客户端命令</li>\n<li>Java客户端</li>\n<li>集群搭建</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>缓存并发专题<ul>\n<li>缓存雪崩</li>\n<li>缓存粒度控制</li>\n<li>缓存击穿</li>\n<li>缓存热点Key重建优化</li>\n<li>缓存同步</li>\n<li>Spring-Cache开发</li>\n</ul>\n</li>\n<li>MongoDB<ul>\n<li>mongodb入门<ul>\n<li>NoSql与sql使用场景分析</li>\n<li>基础概念<ul>\n<li>数据库</li>\n<li>集合</li>\n<li>索引</li>\n<li>文档</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>mongodb进阶<ul>\n<li>常用命令</li>\n<li>快速入门</li>\n<li>mongodb客户端驱动</li>\n<li>增删改查与聚合</li>\n<li>安全控制</li>\n</ul>\n</li>\n<li>mongodb高级知识<ul>\n<li>存储引擎</li>\n<li>索引</li>\n<li>高可用</li>\n</ul>\n</li>\n<li>最佳实践与注意事项</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"数据存储\"><a href=\"#数据存储\" class=\"headerlink\" title=\"数据存储\"></a>数据存储</h4><ul>\n<li>Mysql<ul>\n<li>Mysql主从复制、读写分离高可用方案实战</li>\n<li>Mysql+Keepalived实现双主高可用方案实战</li>\n<li>Mysql实现分库分表高性能解决方案实战</li>\n</ul>\n</li>\n<li>Mycat<ul>\n<li>Mycat简介及用途</li>\n<li>基于Mycat实现Mysql读写分离实战</li>\n<li>基于Mycat实现数据库切分实战</li>\n<li>全局表、ER表、分片机制分析</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"高并发分流技术Nginx\"><a href=\"#高并发分流技术Nginx\" class=\"headerlink\" title=\"高并发分流技术Nginx\"></a>高并发分流技术Nginx</h4><ul>\n<li>Nginx模块简介</li>\n<li>Nginx工作原理及安装配置</li>\n<li>Nginx常用命令管理及升级</li>\n<li>Nginx配置分拣精讲</li>\n<li>实战线上Nginx多站点配置</li>\n<li>Nginx配置优化及深入剖析</li>\n<li>Nginx Rewrite规则剖析</li>\n<li>Nginx日志分析及脚本编写</li>\n<li>Nginx日志切割案例讲解</li>\n<li>Nginx防盗链案例配置</li>\n<li>Nginx日常运维及故障解决</li>\n<li>Nginx构件安全HTTPS架构实践</li>\n<li>企业实战Nginx＋Tomcat动静分离架构实战</li>\n<li>Nginx＋Keepalived集群架构实战</li>\n<li>Nginx＋Keepalived双主架构案例实战</li>\n</ul>\n<h4 id=\"分布式文件存储fastdfs\"><a href=\"#分布式文件存储fastdfs\" class=\"headerlink\" title=\"分布式文件存储fastdfs\"></a>分布式文件存储fastdfs</h4><ul>\n<li>文件存储</li>\n<li>文件同步</li>\n<li>文件查阅</li>\n<li>分布式部署实战</li>\n</ul>\n<h3 id=\"分布式常见场景解决方案\"><a href=\"#分布式常见场景解决方案\" class=\"headerlink\" title=\"分布式常见场景解决方案\"></a>分布式常见场景解决方案</h3><ul>\n<li>分布式主键声称方案</li>\n<li>Session跨域共享实战</li>\n<li>分布式事务解决方案实战</li>\n<li>分布式锁解决方案实战</li>\n<li>分布式单点登录实战SSO</li>\n<li>分布式调度任务系统</li>\n<li>分布式配置中心</li>\n</ul>\n<h2 id=\"团队协作开发专题\"><a href=\"#团队协作开发专题\" class=\"headerlink\" title=\"团队协作开发专题\"></a>团队协作开发专题</h2><ul>\n<li>Git<ul>\n<li>Git基本工作原理<ul>\n<li>与svn对比</li>\n<li>基本运作流程</li>\n</ul>\n</li>\n<li>Git常用操作及问题处理<ul>\n<li>工程初始化及克隆</li>\n<li>文件提交</li>\n<li>分支与常用标签应用</li>\n<li>远程仓库管理</li>\n<li>合并与冲突解决</li>\n<li>架构师职责：Git Flow必备技能，规范团队Git操作</li>\n<li>架构师踩过的坑</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Maven<ul>\n<li><p>Maven 重要指令(clean、complie、test、package、install、deploy)</p>\n</li>\n<li><p>私服－Nexus</p>\n<ol>\n<li>Maven 重要指令(clean、complie、test、package、install、deploy)</li>\n<li>Nexus服务搭建</li>\n<li>Nexus仓库管理</li>\n<li>Nexus使用、上传、配置</li>\n</ol>\n</li>\n<li><p>Maven流行插件实践、手写自己的插件</p>\n</li>\n<li><p>架构师如何理解Scope\\Lifecycle\\Phase\\Goal</p>\n</li>\n</ul>\n</li>\n<li>Jenkins<ul>\n<li>Jenkins服务部署</li>\n<li>Jenkins持续集成</li>\n</ul>\n</li>\n<li>Sonar<ul>\n<li>静态代码检查，代码更健壮</li>\n<li>代码走查</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"微服务专题\"><a href=\"#微服务专题\" class=\"headerlink\" title=\"微服务专题\"></a>微服务专题</h2><h3 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h3><ul>\n<li>SpringBoot与微服务的区别与联系</li>\n<li>快速构建SpringBoot工程</li>\n<li>SpringBoot核心组建start、 actuator等解析</li>\n<li>快速集成Mybatis实战</li>\n<li>快速集成Dubbo及案例实战</li>\n<li>快速集成redis及案例实战</li>\n<li>构建Swagger插件实现API管理及接口测试体系</li>\n</ul>\n<h3 id=\"SpringCloud\"><a href=\"#SpringCloud\" class=\"headerlink\" title=\"SpringCloud\"></a>SpringCloud</h3><ul>\n<li>Ribbon客户端负载均衡原理与算法详解，与服务器端敷在均衡的区别</li>\n<li>Feign声明式服务调用方式实现</li>\n<li>Hystrix服务熔断及服务障级实战</li>\n<li>Eureka注册中心构件级源码分析</li>\n<li>Config配置服务中心与svn、git快速集成</li>\n<li>Sleuth调用链路跟踪</li>\n<li>BUS消息总线技术</li>\n<li>Stream消息驱动的微服务</li>\n</ul>\n<h3 id=\"Docker虚拟化技术\"><a href=\"#Docker虚拟化技术\" class=\"headerlink\" title=\"Docker虚拟化技术\"></a>Docker虚拟化技术</h3><ul>\n<li>Docker介绍、安装与使用</li>\n<li>Docker组成<ul>\n<li>镜像</li>\n<li>容器</li>\n<li>私有仓库</li>\n</ul>\n</li>\n<li>Docker Compose部署脚本</li>\n<li>Docker Service服务编排</li>\n<li>Docker Redis 分布式集群部署</li>\n<li>Docker File 构建</li>\n<li>通过Maven插件打包Docker镜像</li>\n<li>Docker部署级运行应用程序</li>\n<li>Kubernetes编配</li>\n<li>基于Docker构建Mysql集群实战</li>\n<li>高可用SpringCloud微服务与Docker集成实现动态扩容实战</li>\n</ul>"},{"title":"又想起来了","date":"2022-07-03T06:02:37.000Z","reward":true,"toc":true,"_content":"\n\n好久没有更新写东西了，今天又想起来了，准备重新拾起来。加油\n","source":"_posts/又想起来了.md","raw":"---\ntitle: 又想起来了\ndate: 2022-07-03 14:02:37\ntags: \n - 感想\nreward: true\ntoc: true\n---\n\n\n好久没有更新写东西了，今天又想起来了，准备重新拾起来。加油\n","slug":"又想起来了","published":1,"updated":"2022-07-03T06:02:32.846Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptiw000xy42jfoxf4to4","content":"<p>好久没有更新写东西了，今天又想起来了，准备重新拾起来。加油</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好久没有更新写东西了，今天又想起来了，准备重新拾起来。加油</p>\n"},{"title":"随想","date":"2019-03-17T17:08:15.000Z","_content":"\n\n## 2019.03.18\n### 时间维度（过去）\n\n* 要养成每天一小总结，每个星期一总结，每个月一总结，每年一总结的习惯，总结自己一个阶段型的事情，总结自己的感想，通过不同的时间跨度对自己有个完整的审视\n* 每天一总结，以天为单位\n* 每星期一总结，以星期为单位\n* 每月一总结，以月为单位\n* 每年一总结，以年为单位\n* 每个单位都需要简洁明了的说清本单位时间的主要事项\n* 切记每个大的单位不要累加每个小单位的事，要从更高的层次审视自己才是\n\n### 目标维度（未来）\n\n* 每日省吾身\n* 关注自身技能及学习\n* 关注财富及家庭计划\n* 关注人生意义\n* 宇宙长河","source":"_posts/随想.md","raw":"---\ntitle: 随想\ndate: 2019-03-18 01:08:15\ncategories: \n- 笔记\ntags: 随想\n---\n\n\n## 2019.03.18\n### 时间维度（过去）\n\n* 要养成每天一小总结，每个星期一总结，每个月一总结，每年一总结的习惯，总结自己一个阶段型的事情，总结自己的感想，通过不同的时间跨度对自己有个完整的审视\n* 每天一总结，以天为单位\n* 每星期一总结，以星期为单位\n* 每月一总结，以月为单位\n* 每年一总结，以年为单位\n* 每个单位都需要简洁明了的说清本单位时间的主要事项\n* 切记每个大的单位不要累加每个小单位的事，要从更高的层次审视自己才是\n\n### 目标维度（未来）\n\n* 每日省吾身\n* 关注自身技能及学习\n* 关注财富及家庭计划\n* 关注人生意义\n* 宇宙长河","slug":"随想","published":1,"updated":"2019-03-19T17:06:44.914Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptix0010y42jh0wp7zyn","content":"<h2 id=\"2019-03-18\"><a href=\"#2019-03-18\" class=\"headerlink\" title=\"2019.03.18\"></a>2019.03.18</h2><h3 id=\"时间维度（过去）\"><a href=\"#时间维度（过去）\" class=\"headerlink\" title=\"时间维度（过去）\"></a>时间维度（过去）</h3><ul>\n<li>要养成每天一小总结，每个星期一总结，每个月一总结，每年一总结的习惯，总结自己一个阶段型的事情，总结自己的感想，通过不同的时间跨度对自己有个完整的审视</li>\n<li>每天一总结，以天为单位</li>\n<li>每星期一总结，以星期为单位</li>\n<li>每月一总结，以月为单位</li>\n<li>每年一总结，以年为单位</li>\n<li>每个单位都需要简洁明了的说清本单位时间的主要事项</li>\n<li>切记每个大的单位不要累加每个小单位的事，要从更高的层次审视自己才是</li>\n</ul>\n<h3 id=\"目标维度（未来）\"><a href=\"#目标维度（未来）\" class=\"headerlink\" title=\"目标维度（未来）\"></a>目标维度（未来）</h3><ul>\n<li>每日省吾身</li>\n<li>关注自身技能及学习</li>\n<li>关注财富及家庭计划</li>\n<li>关注人生意义</li>\n<li>宇宙长河</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"2019-03-18\"><a href=\"#2019-03-18\" class=\"headerlink\" title=\"2019.03.18\"></a>2019.03.18</h2><h3 id=\"时间维度（过去）\"><a href=\"#时间维度（过去）\" class=\"headerlink\" title=\"时间维度（过去）\"></a>时间维度（过去）</h3><ul>\n<li>要养成每天一小总结，每个星期一总结，每个月一总结，每年一总结的习惯，总结自己一个阶段型的事情，总结自己的感想，通过不同的时间跨度对自己有个完整的审视</li>\n<li>每天一总结，以天为单位</li>\n<li>每星期一总结，以星期为单位</li>\n<li>每月一总结，以月为单位</li>\n<li>每年一总结，以年为单位</li>\n<li>每个单位都需要简洁明了的说清本单位时间的主要事项</li>\n<li>切记每个大的单位不要累加每个小单位的事，要从更高的层次审视自己才是</li>\n</ul>\n<h3 id=\"目标维度（未来）\"><a href=\"#目标维度（未来）\" class=\"headerlink\" title=\"目标维度（未来）\"></a>目标维度（未来）</h3><ul>\n<li>每日省吾身</li>\n<li>关注自身技能及学习</li>\n<li>关注财富及家庭计划</li>\n<li>关注人生意义</li>\n<li>宇宙长河</li>\n</ul>\n"},{"title":"别人面试的相关内容","date":"2019-01-05T06:48:41.000Z","reward":true,"toc":true,"_content":"\n一个朋友的电话面试，本人有幸在旁边听到面试的整个过程。特此记录下\n# 面试问到的问题\n\n1. 自己用到的技术栈\n2. 提到redis，redis的应用场景\n3. c语言用到的缓存\n4. 缓存和数据库同时使用，如何保证缓存和数据库的一致性；数据库和缓存两层结构，一般先写数据库然后再更新缓存，保持缓存和数据库两边数据是一样的，中间过程有问题，可能会出错，在并发的情况下，读到的数据有可能有脏数据，有没有考虑到这种情况。redis做缓存是有一个网络调用，在网络调用失败的情况下，缓存更新就失败了，如何保持缓存和数据库失败的一致性。用先删掉缓存在更新数据库在更新缓存的方式作答，又问，如果并发，两个线程更新同一个内容的时候，如何避免造成数据的不一致性\n","source":"_posts/面试问到的问题.md","raw":"---\ntitle: 别人面试的相关内容\ndate: 2019-01-05 14:48:41\ntags: \n - 面试\n - java\nreward: true\ntoc: true\n---\n\n一个朋友的电话面试，本人有幸在旁边听到面试的整个过程。特此记录下\n# 面试问到的问题\n\n1. 自己用到的技术栈\n2. 提到redis，redis的应用场景\n3. c语言用到的缓存\n4. 缓存和数据库同时使用，如何保证缓存和数据库的一致性；数据库和缓存两层结构，一般先写数据库然后再更新缓存，保持缓存和数据库两边数据是一样的，中间过程有问题，可能会出错，在并发的情况下，读到的数据有可能有脏数据，有没有考虑到这种情况。redis做缓存是有一个网络调用，在网络调用失败的情况下，缓存更新就失败了，如何保持缓存和数据库失败的一致性。用先删掉缓存在更新数据库在更新缓存的方式作答，又问，如果并发，两个线程更新同一个内容的时候，如何避免造成数据的不一致性\n","slug":"面试问到的问题","published":1,"updated":"2019-03-13T15:43:05.570Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptiz0013y42je8j4165c","content":"<p>一个朋友的电话面试，本人有幸在旁边听到面试的整个过程。特此记录下</p>\n<h1 id=\"面试问到的问题\"><a href=\"#面试问到的问题\" class=\"headerlink\" title=\"面试问到的问题\"></a>面试问到的问题</h1><ol>\n<li>自己用到的技术栈</li>\n<li>提到redis，redis的应用场景</li>\n<li>c语言用到的缓存</li>\n<li>缓存和数据库同时使用，如何保证缓存和数据库的一致性；数据库和缓存两层结构，一般先写数据库然后再更新缓存，保持缓存和数据库两边数据是一样的，中间过程有问题，可能会出错，在并发的情况下，读到的数据有可能有脏数据，有没有考虑到这种情况。redis做缓存是有一个网络调用，在网络调用失败的情况下，缓存更新就失败了，如何保持缓存和数据库失败的一致性。用先删掉缓存在更新数据库在更新缓存的方式作答，又问，如果并发，两个线程更新同一个内容的时候，如何避免造成数据的不一致性</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>一个朋友的电话面试，本人有幸在旁边听到面试的整个过程。特此记录下</p>\n<h1 id=\"面试问到的问题\"><a href=\"#面试问到的问题\" class=\"headerlink\" title=\"面试问到的问题\"></a>面试问到的问题</h1><ol>\n<li>自己用到的技术栈</li>\n<li>提到redis，redis的应用场景</li>\n<li>c语言用到的缓存</li>\n<li>缓存和数据库同时使用，如何保证缓存和数据库的一致性；数据库和缓存两层结构，一般先写数据库然后再更新缓存，保持缓存和数据库两边数据是一样的，中间过程有问题，可能会出错，在并发的情况下，读到的数据有可能有脏数据，有没有考虑到这种情况。redis做缓存是有一个网络调用，在网络调用失败的情况下，缓存更新就失败了，如何保持缓存和数据库失败的一致性。用先删掉缓存在更新数据库在更新缓存的方式作答，又问，如果并发，两个线程更新同一个内容的时候，如何避免造成数据的不一致性</li>\n</ol>\n"},{"title":"勉励自己","date":"2019-03-13T15:44:17.000Z","_content":"\n\n***多读书，多学习东西，首先投资自己，然后再投资理财***\n\n","source":"_posts/勉励自己.md","raw":"---\ntitle: 勉励自己\ndate: 2019-03-13 23:44:17\ncategories: \n- 学习\ntags: 随笔\n\n---\n\n\n***多读书，多学习东西，首先投资自己，然后再投资理财***\n\n","slug":"勉励自己","published":1,"updated":"2019-03-13T15:48:57.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl54wptj00016y42j2xrb921e","content":"<p><em><strong>多读书，多学习东西，首先投资自己，然后再投资理财</strong></em></p>\n","site":{"data":{}},"excerpt":"","more":"<p><em><strong>多读书，多学习东西，首先投资自己，然后再投资理财</strong></em></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cl54wpthu0001y42j8k5chlm4","category_id":"cl54wpti10004y42jh7txejwg","_id":"cl54wpti8000by42janmig4z6"},{"post_id":"cl54wptiq000ry42j2t3rdoa7","category_id":"cl54wpti10004y42jh7txejwg","_id":"cl54wptix000yy42jcdepfoza"},{"post_id":"cl54wptj00016y42j2xrb921e","category_id":"cl54wpti10004y42jh7txejwg","_id":"cl54wptj5001by42j9tvlfx4o"},{"post_id":"cl54wptix0010y42jh0wp7zyn","category_id":"cl54wptj00014y42j4ya0hn4v","_id":"cl54wptj6001ey42jctnu9kbk"}],"PostTag":[{"post_id":"cl54wpthu0001y42j8k5chlm4","tag_id":"cl54wpti20005y42jh798e3zv","_id":"cl54wpti7000ay42j1xq10267"},{"post_id":"cl54wpti40007y42j4doq2wl6","tag_id":"cl54wpti70009y42jhwqw6gdv","_id":"cl54wptia000ey42jf5tgbyap"},{"post_id":"cl54wpti40007y42j4doq2wl6","tag_id":"cl54wpti8000cy42j79ou9xnn","_id":"cl54wptib000fy42j3thr0ipn"},{"post_id":"cl54wpti50008y42j9fqc59yl","tag_id":"cl54wpti70009y42jhwqw6gdv","_id":"cl54wptic000hy42jea6shc10"},{"post_id":"cl54wpti50008y42j9fqc59yl","tag_id":"cl54wptib000gy42jbawy75uo","_id":"cl54wptic000iy42j06t01bvv"},{"post_id":"cl54wptik000jy42jhjma44rt","tag_id":"cl54wpti70009y42jhwqw6gdv","_id":"cl54wptim000ly42jd6a81r4i"},{"post_id":"cl54wptik000jy42jhjma44rt","tag_id":"cl54wptib000gy42jbawy75uo","_id":"cl54wptin000ny42jds6hbqdc"},{"post_id":"cl54wptiq000ry42j2t3rdoa7","tag_id":"cl54wpti20005y42jh798e3zv","_id":"cl54wptiu000uy42jdq761at7"},{"post_id":"cl54wptin000my42jaqut5cm5","tag_id":"cl54wptio000py42jbe7c9an2","_id":"cl54wptiw000wy42j2rzrg944"},{"post_id":"cl54wptis000sy42jhwei0weg","tag_id":"cl54wpti70009y42jhwqw6gdv","_id":"cl54wptix000zy42jg65b4fun"},{"post_id":"cl54wptis000sy42jhwei0weg","tag_id":"cl54wptib000gy42jbawy75uo","_id":"cl54wptiy0012y42jhuxt3f4l"},{"post_id":"cl54wptiv000vy42j3mmea7m6","tag_id":"cl54wpti70009y42jhwqw6gdv","_id":"cl54wptj00015y42jbcdr627o"},{"post_id":"cl54wptiv000vy42j3mmea7m6","tag_id":"cl54wptib000gy42jbawy75uo","_id":"cl54wptj30017y42j2vkuewzc"},{"post_id":"cl54wptip000qy42j2y3g1vu8","tag_id":"cl54wptio000py42jbe7c9an2","_id":"cl54wptj50019y42jf7si8p5u"},{"post_id":"cl54wptj00016y42j2xrb921e","tag_id":"cl54wpti20005y42jh798e3zv","_id":"cl54wptj5001ay42j2gwo73ww"},{"post_id":"cl54wptiw000xy42jfoxf4to4","tag_id":"cl54wptiy0011y42jb5r6fcvy","_id":"cl54wptj6001dy42jadacheaj"},{"post_id":"cl54wptix0010y42jh0wp7zyn","tag_id":"cl54wptj40018y42j56dza1xl","_id":"cl54wptj6001fy42j03js475q"},{"post_id":"cl54wptiz0013y42je8j4165c","tag_id":"cl54wptj5001cy42j97xbf0w7","_id":"cl54wptj7001gy42j8cm78hbj"},{"post_id":"cl54wptiz0013y42je8j4165c","tag_id":"cl54wptib000gy42jbawy75uo","_id":"cl54wptj7001hy42j4fx10pp2"}],"Tag":[{"name":"随笔","_id":"cl54wpti20005y42jh798e3zv"},{"name":"学习","_id":"cl54wpti70009y42jhwqw6gdv"},{"name":"ajax","_id":"cl54wpti8000cy42j79ou9xnn"},{"name":"java","_id":"cl54wptib000gy42jbawy75uo"},{"name":"博客优化","_id":"cl54wptio000py42jbe7c9an2"},{"name":"感想","_id":"cl54wptiy0011y42jb5r6fcvy"},{"name":"随想","_id":"cl54wptj40018y42j56dza1xl"},{"name":"面试","_id":"cl54wptj5001cy42j97xbf0w7"}]}}